{"version":3,"sources":["NavigationContainer.tsx"],"names":["React","BaseNavigationContainer","ThemeProvider","DefaultTheme","LinkingContext","useThenable","useLinking","useBackButton","NavigationContainer","forwardRef","ref","theme","linking","fallback","onReady","rest","isLinkingEnabled","enabled","refContainer","useRef","getInitialState","prefixes","isResolved","initialState","useImperativeHandle","current","linkingContext","useMemo","options","isReady","onReadyRef","useEffect"],"mappings":";;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,uBADF,QAIO,wBAJP;AAKA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAUA;;;;;;;;;;;;;AAaA,MAAMC,mBAAmB,gBAAGR,KAAK,CAACS,UAAN,CAAiB,SAASD,mBAAT,OAE3CE,GAF2C,EAG3C;AAAA,MAFA;AAAEC,IAAAA,KAAK,GAAGR,YAAV;AAAwBS,IAAAA,OAAxB;AAAiCC,IAAAA,QAAQ,GAAG,IAA5C;AAAkDC,IAAAA;AAAlD,GAEA;AAAA,MAF8DC,IAE9D;;AACA,QAAMC,gBAAgB,GAAGJ,OAAO,GAAGA,OAAO,CAACK,OAAR,KAAoB,KAAvB,GAA+B,KAA/D;AAEA,QAAMC,YAAY,GAAGlB,KAAK,CAACmB,MAAN,CAAqC,IAArC,CAArB;AAEAZ,EAAAA,aAAa,CAACW,YAAD,CAAb;AAEA,QAAM;AAAEE,IAAAA;AAAF,MAAsBd,UAAU,CAACY,YAAD;AACpCD,IAAAA,OAAO,EAAED,gBAD2B;AAEpCK,IAAAA,QAAQ,EAAE;AAF0B,KAGjCT,OAHiC,EAAtC;AAMA,QAAM,CAACU,UAAD,EAAaC,YAAb,IAA6BlB,WAAW,CAACe,eAAD,CAA9C;AAEApB,EAAAA,KAAK,CAACwB,mBAAN,CAA0Bd,GAA1B,EAA+B,MAAMQ,YAAY,CAACO,OAAlD;AAEA,QAAMC,cAAc,GAAG1B,KAAK,CAAC2B,OAAN,CAAc,OAAO;AAAEC,IAAAA,OAAO,EAAEhB;AAAX,GAAP,CAAd,EAA4C,CAACA,OAAD,CAA5C,CAAvB;AAEA,QAAMiB,OAAO,GAAGd,IAAI,CAACQ,YAAL,IAAqB,IAArB,IAA6B,CAACP,gBAA9B,IAAkDM,UAAlE;AAEA,QAAMQ,UAAU,GAAG9B,KAAK,CAACmB,MAAN,CAAaL,OAAb,CAAnB;AAEAd,EAAAA,KAAK,CAAC+B,SAAN,CAAgB,MAAM;AACpBD,IAAAA,UAAU,CAACL,OAAX,GAAqBX,OAArB;AACD,GAFD;AAIAd,EAAAA,KAAK,CAAC+B,SAAN,CAAgB,MAAM;AACpB,QAAIF,OAAJ,EAAa;AAAA;;AACX,6BAAAC,UAAU,CAACL,OAAX,iFAAAK,UAAU;AACX;AACF,GAJD,EAIG,CAACD,OAAD,CAJH;;AAMA,MAAI,CAACA,OAAL,EAAc;AACZ;AACA;AACA,WAAOhB,QAAP;AACD;;AAED,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEa;AAAhC,kBACE,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEf;AAAtB,kBACE,oBAAC,uBAAD,eACMI,IADN;AAEE,IAAA,YAAY,EACVA,IAAI,CAACQ,YAAL,IAAqB,IAArB,GAA4BA,YAA5B,GAA2CR,IAAI,CAACQ,YAHpD;AAKE,IAAA,GAAG,EAAEL;AALP,KADF,CADF,CADF;AAaD,CAvD2B,CAA5B;AAyDA,eAAeV,mBAAf","sourcesContent":["import * as React from 'react';\nimport {\n  BaseNavigationContainer,\n  NavigationContainerProps,\n  NavigationContainerRef,\n} from '@react-navigation/core';\nimport ThemeProvider from './theming/ThemeProvider';\nimport DefaultTheme from './theming/DefaultTheme';\nimport LinkingContext from './LinkingContext';\nimport useThenable from './useThenable';\nimport useLinking from './useLinking';\nimport useBackButton from './useBackButton';\nimport type { Theme, LinkingOptions } from './types';\n\ntype Props = NavigationContainerProps & {\n  theme?: Theme;\n  linking?: LinkingOptions;\n  fallback?: React.ReactNode;\n  onReady?: () => void;\n};\n\n/**\n * Container component which holds the navigation state designed for React Native apps.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree. When deep link handling is enabled, this will override deep links when specified. Make sure that you don't specify an `initialState` when there's a deep link (`Linking.getInitialURL()`).\n * @param props.onReady Callback which is called after the navigation tree mounts.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.theme Theme object for the navigators.\n * @param props.linking Options for deep linking. Deep link handling is enabled when this prop is provided, unless `linking.enabled` is `false`.\n * @param props.fallback Fallback component to render until we have finished getting initial state when linking is enabled. Defaults to `null`.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst NavigationContainer = React.forwardRef(function NavigationContainer(\n  { theme = DefaultTheme, linking, fallback = null, onReady, ...rest }: Props,\n  ref?: React.Ref<NavigationContainerRef | null>\n) {\n  const isLinkingEnabled = linking ? linking.enabled !== false : false;\n\n  const refContainer = React.useRef<NavigationContainerRef>(null);\n\n  useBackButton(refContainer);\n\n  const { getInitialState } = useLinking(refContainer, {\n    enabled: isLinkingEnabled,\n    prefixes: [],\n    ...linking,\n  });\n\n  const [isResolved, initialState] = useThenable(getInitialState);\n\n  React.useImperativeHandle(ref, () => refContainer.current);\n\n  const linkingContext = React.useMemo(() => ({ options: linking }), [linking]);\n\n  const isReady = rest.initialState != null || !isLinkingEnabled || isResolved;\n\n  const onReadyRef = React.useRef(onReady);\n\n  React.useEffect(() => {\n    onReadyRef.current = onReady;\n  });\n\n  React.useEffect(() => {\n    if (isReady) {\n      onReadyRef.current?.();\n    }\n  }, [isReady]);\n\n  if (!isReady) {\n    // This is temporary until we have Suspense for data-fetching\n    // Then the fallback will be handled by a parent `Suspense` component\n    return fallback as React.ReactElement;\n  }\n\n  return (\n    <LinkingContext.Provider value={linkingContext}>\n      <ThemeProvider value={theme}>\n        <BaseNavigationContainer\n          {...rest}\n          initialState={\n            rest.initialState == null ? initialState : rest.initialState\n          }\n          ref={refContainer}\n        />\n      </ThemeProvider>\n    </LinkingContext.Provider>\n  );\n});\n\nexport default NavigationContainer;\n"]}