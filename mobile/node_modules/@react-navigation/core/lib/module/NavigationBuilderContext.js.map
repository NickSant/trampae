{"version":3,"sources":["NavigationBuilderContext.tsx"],"names":["React","NavigationBuilderContext","createContext","onDispatchAction","undefined","onOptionsChange"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAuBA;;;AAGA,MAAMC,wBAAwB,GAAGD,KAAK,CAACE,aAAN,CAW9B;AACDC,EAAAA,gBAAgB,EAAE,MAAMC,SADvB;AAEDC,EAAAA,eAAe,EAAE,MAAMD;AAFtB,CAX8B,CAAjC;AAgBA,eAAeH,wBAAf","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n} from '@react-navigation/routers';\nimport type { NavigationHelpers } from './types';\n\nexport type ChildActionListener = (\n  action: NavigationAction,\n  visitedNavigators?: Set<string>\n) => boolean;\n\nexport type FocusedNavigationCallback<T> = (\n  navigation: NavigationHelpers<ParamListBase>\n) => T;\n\nexport type FocusedNavigationListener = <T>(\n  callback: FocusedNavigationCallback<T>\n) => { handled: boolean; result: T };\n\nexport type NavigatorStateGetter = () => NavigationState;\n\n/**\n * Context which holds the required helpers needed to build nested navigators.\n */\nconst NavigationBuilderContext = React.createContext<{\n  onAction?: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  addActionListener?: (listener: ChildActionListener) => void;\n  addFocusedListener?: (listener: FocusedNavigationListener) => void;\n  onRouteFocus?: (key: string) => void;\n  onDispatchAction: (action: NavigationAction, noop: boolean) => void;\n  addStateGetter?: (key: string, getter: NavigatorStateGetter) => void;\n  onOptionsChange: (options: object) => void;\n}>({\n  onDispatchAction: () => undefined,\n  onOptionsChange: () => undefined,\n});\n\nexport default NavigationBuilderContext;\n"]}