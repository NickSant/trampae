{"version":3,"sources":["useDescriptors.tsx"],"names":["useDescriptors","state","screens","navigation","screenOptions","onAction","getState","setState","addActionListener","addFocusedListener","addStateGetter","onRouteFocus","router","emitter","options","setOptions","React","useState","onDispatchAction","onOptionsChange","useContext","NavigationBuilderContext","context","useMemo","navigations","routes","reduce","acc","route","screen","name","key","routeOptions","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  ChildActionListener,\n  FocusedNavigationListener,\n  NavigatorStateGetter,\n} from './NavigationBuilderContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport type {\n  Descriptor,\n  NavigationHelpers,\n  RouteConfig,\n  RouteProp,\n  EventMapBase,\n} from './types';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  onAction: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addActionListener: (listener: ChildActionListener) => void;\n  addFocusedListener: (listener: FocusedNavigationListener) => void;\n  addStateGetter: (key: string, getter: NavigatorStateGetter) => void;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<any>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  onAction,\n  getState,\n  setState,\n  addActionListener,\n  addFocusedListener,\n  addStateGetter,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addActionListener,\n      addFocusedListener,\n      addStateGetter,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    }),\n    [\n      addActionListener,\n      addFocusedListener,\n      addStateGetter,\n      navigation,\n      onAction,\n      onDispatchAction,\n      onRouteFocus,\n      onOptionsChange,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  return state.routes.reduce<\n    Record<string, Descriptor<ParamListBase, string, State, ScreenOptions>>\n  >((acc, route) => {\n    const screen = screens[route.name];\n    const navigation = navigations[route.key];\n\n    const routeOptions = {\n      // The default `screenOptions` passed to the navigator\n      ...(typeof screenOptions === 'object' || screenOptions == null\n        ? screenOptions\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screenOptions({\n            route,\n            navigation,\n          })),\n      // The `options` prop passed to `Screen` elements\n      ...(typeof screen.options === 'object' || screen.options == null\n        ? screen.options\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screen.options({\n            route,\n            navigation,\n          })),\n      // The options set via `navigation.setOptions`\n      ...options[route.key],\n    };\n\n    acc[route.key] = {\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  getState={getState}\n                  setState={setState}\n                  options={routeOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: routeOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]}