{"version":3,"sources":["SceneView.tsx"],"names":["SceneView","screen","route","navigation","getState","setState","options","navigatorKeyRef","React","useRef","onOptionsChange","useContext","NavigationBuilderContext","getKey","useCallback","current","optionsRef","getOptions","addOptionsGetter","hasAnyChildListener","key","optionsChange","setKey","getCurrentState","state","currentRoute","routes","find","r","undefined","setCurrentState","child","map","context","useMemo","name","component","children"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  Route,\n  ParamListBase,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport useOptionsGetters from './useOptionsGetters';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport useFocusEffect from './useFocusEffect';\nimport type { NavigationProp, RouteConfig, EventMapBase } from './types';\n\ntype Props<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  screen: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string> & {\n    state?: NavigationState | PartialState<NavigationState>;\n  };\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  screen,\n  route,\n  navigation,\n  getState,\n  setState,\n  options,\n}: Props<State, ScreenOptions, EventMap>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const { onOptionsChange } = React.useContext(NavigationBuilderContext);\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n  const optionsRef = React.useRef<object | undefined>(options);\n  const getOptions = React.useCallback(() => optionsRef.current, []);\n\n  const { addOptionsGetter, hasAnyChildListener } = useOptionsGetters({\n    key: route.key,\n    getState,\n    getOptions,\n  });\n\n  const optionsChange = React.useCallback(() => {\n    optionsRef.current = options;\n    if (!hasAnyChildListener) {\n      onOptionsChange(options);\n    }\n  }, [onOptionsChange, options, hasAnyChildListener]);\n\n  useFocusEffect(optionsChange);\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const context = React.useMemo(\n    () => ({\n      state: route.state,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      addOptionsGetter,\n    }),\n    [\n      getCurrentState,\n      getKey,\n      route.state,\n      setCurrentState,\n      setKey,\n      addOptionsGetter,\n    ]\n  );\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          // @ts-expect-error: these properties exist on screen, but TS is confused\n          render={screen.component || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {'component' in screen && screen.component !== undefined ? (\n            <screen.component navigation={navigation} route={route} />\n          ) : 'children' in screen && screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n"]}