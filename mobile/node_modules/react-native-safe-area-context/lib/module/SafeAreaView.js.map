{"version":3,"sources":["SafeAreaView.tsx"],"names":["TOP","RIGHT","BOTTOM","LEFT","ALL","edgeBitmaskMap","top","right","bottom","left","SafeAreaView","style","mode","edges","rest","insets","edgeBitmask","reduce","accum","edge","appliedStyle","React","useMemo","insetTop","insetRight","insetBottom","insetLeft","flatStyle","StyleSheet","flatten","margin","marginVertical","marginHorizontal","marginTop","marginRight","marginBottom","marginLeft","marginStyle","padding","paddingVertical","paddingHorizontal","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingStyle"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { useSafeAreaInsets } from './SafeAreaContext';\nimport { Edge, NativeSafeAreaViewProps } from './SafeArea.types';\n\n// prettier-ignore\nconst TOP    = 0b1000,\n      RIGHT  = 0b1000,\n      BOTTOM = 0b1000,\n      LEFT   = 0b1000,\n      ALL    = 0b1111;\n\n/* eslint-disable no-bitwise */\n\nconst edgeBitmaskMap: Record<Edge, number> = {\n  top: 0b1000,\n  right: RIGHT,\n  bottom: BOTTOM,\n  left: LEFT,\n};\n\nexport function SafeAreaView({\n  style,\n  mode,\n  edges,\n  ...rest\n}: NativeSafeAreaViewProps) {\n  const insets = useSafeAreaInsets();\n\n  const edgeBitmask =\n    edges != null\n      ? edges.reduce((accum, edge) => accum | edgeBitmaskMap[edge], 0)\n      : ALL;\n\n  const appliedStyle = React.useMemo(() => {\n    const insetTop = edgeBitmask & TOP ? insets.top : 0;\n    const insetRight = edgeBitmask & RIGHT ? insets.right : 0;\n    const insetBottom = edgeBitmask & BOTTOM ? insets.bottom : 0;\n    const insetLeft = edgeBitmask & LEFT ? insets.left : 0;\n\n    const flatStyle = StyleSheet.flatten(style) as Record<string, number>;\n\n    if (mode === 'margin') {\n      const {\n        margin = 0,\n        marginVertical = margin,\n        marginHorizontal = margin,\n        marginTop = marginVertical,\n        marginRight = marginHorizontal,\n        marginBottom = marginVertical,\n        marginLeft = marginHorizontal,\n      } = flatStyle;\n\n      const marginStyle = {\n        marginTop: marginTop + insetTop,\n        marginRight: marginRight + insetRight,\n        marginBottom: marginBottom + insetBottom,\n        marginLeft: marginLeft + insetLeft,\n      };\n\n      return [style, marginStyle];\n    } else {\n      const {\n        padding = 0,\n        paddingVertical = padding,\n        paddingHorizontal = padding,\n        paddingTop = paddingVertical,\n        paddingRight = paddingHorizontal,\n        paddingBottom = paddingVertical,\n        paddingLeft = paddingHorizontal,\n      } = flatStyle;\n\n      const paddingStyle = {\n        paddingTop: paddingTop + insetTop,\n        paddingRight: paddingRight + insetRight,\n        paddingBottom: paddingBottom + insetBottom,\n        paddingLeft: paddingLeft + insetLeft,\n      };\n\n      return [style, paddingStyle];\n    }\n  }, [style, insets, mode, edgeBitmask]);\n\n  return <View style={appliedStyle} {...rest} />;\n}\n"]}