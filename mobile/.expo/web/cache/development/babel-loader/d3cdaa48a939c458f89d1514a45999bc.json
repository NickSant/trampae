{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport SceneView from \"./SceneView\";\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport useNavigationCache from \"./useNavigationCache\";\nimport NavigationContext from \"./NavigationContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nexport default function useDescriptors(_ref) {\n  var state = _ref.state,\n      screens = _ref.screens,\n      navigation = _ref.navigation,\n      screenOptions = _ref.screenOptions,\n      onAction = _ref.onAction,\n      getState = _ref.getState,\n      setState = _ref.setState,\n      addActionListener = _ref.addActionListener,\n      addFocusedListener = _ref.addFocusedListener,\n      addStateGetter = _ref.addStateGetter,\n      onRouteFocus = _ref.onRouteFocus,\n      router = _ref.router,\n      emitter = _ref.emitter;\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      options = _React$useState2[0],\n      setOptions = _React$useState2[1];\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      onDispatchAction = _React$useContext.onDispatchAction,\n      onOptionsChange = _React$useContext.onOptionsChange;\n\n  var context = React.useMemo(function () {\n    return {\n      navigation: navigation,\n      onAction: onAction,\n      addActionListener: addActionListener,\n      addFocusedListener: addFocusedListener,\n      addStateGetter: addStateGetter,\n      onRouteFocus: onRouteFocus,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange\n    };\n  }, [addActionListener, addFocusedListener, addStateGetter, navigation, onAction, onDispatchAction, onRouteFocus, onOptionsChange]);\n  var navigations = useNavigationCache({\n    state: state,\n    getState: getState,\n    navigation: navigation,\n    setOptions: setOptions,\n    router: router,\n    emitter: emitter\n  });\n  return state.routes.reduce(function (acc, route) {\n    var screen = screens[route.name];\n    var navigation = navigations[route.key];\n\n    var routeOptions = _objectSpread(_objectSpread(_objectSpread({}, typeof screenOptions === 'object' || screenOptions == null ? screenOptions : screenOptions({\n      route: route,\n      navigation: navigation\n    })), typeof screen.options === 'object' || screen.options == null ? screen.options : screen.options({\n      route: route,\n      navigation: navigation\n    })), options[route.key]);\n\n    acc[route.key] = {\n      navigation: navigation,\n      render: function render() {\n        return React.createElement(NavigationBuilderContext.Provider, {\n          key: route.key,\n          value: context\n        }, React.createElement(NavigationContext.Provider, {\n          value: navigation\n        }, React.createElement(NavigationRouteContext.Provider, {\n          value: route\n        }, React.createElement(SceneView, {\n          navigation: navigation,\n          route: route,\n          screen: screen,\n          getState: getState,\n          setState: setState,\n          options: routeOptions\n        }))));\n      },\n      options: routeOptions\n    };\n    return acc;\n  }, {});\n}","map":{"version":3,"sources":["useDescriptors.tsx"],"names":["emitter","React","onOptionsChange","context","navigation","onAction","addActionListener","addFocusedListener","addStateGetter","onRouteFocus","onDispatchAction","navigations","useNavigationCache","state","getState","setOptions","router","screen","screens","route","routeOptions","screenOptions","options","acc","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  ChildActionListener,\n  FocusedNavigationListener,\n  NavigatorStateGetter,\n} from './NavigationBuilderContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport type {\n  Descriptor,\n  NavigationHelpers,\n  RouteConfig,\n  RouteProp,\n  EventMapBase,\n} from './types';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  onAction: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addActionListener: (listener: ChildActionListener) => void;\n  addFocusedListener: (listener: FocusedNavigationListener) => void;\n  addStateGetter: (key: string, getter: NavigatorStateGetter) => void;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<any>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  onAction,\n  getState,\n  setState,\n  addActionListener,\n  addFocusedListener,\n  addStateGetter,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addActionListener,\n      addFocusedListener,\n      addStateGetter,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    }),\n    [\n      addActionListener,\n      addFocusedListener,\n      addStateGetter,\n      navigation,\n      onAction,\n      onDispatchAction,\n      onRouteFocus,\n      onOptionsChange,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  return state.routes.reduce<\n    Record<string, Descriptor<ParamListBase, string, State, ScreenOptions>>\n  >((acc, route) => {\n    const screen = screens[route.name];\n    const navigation = navigations[route.key];\n\n    const routeOptions = {\n      // The default `screenOptions` passed to the navigator\n      ...(typeof screenOptions === 'object' || screenOptions == null\n        ? screenOptions\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screenOptions({\n            route,\n            navigation,\n          })),\n      // The `options` prop passed to `Screen` elements\n      ...(typeof screen.options === 'object' || screen.options == null\n        ? screen.options\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screen.options({\n            route,\n            navigation,\n          })),\n      // The options set via `navigation.setOptions`\n      ...options[route.key],\n    };\n\n    acc[route.key] = {\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  getState={getState}\n                  setState={setState}\n                  options={routeOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: routeOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}