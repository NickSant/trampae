{"ast":null,"code":"function _createForOfIteratorHelperLoose(o) { var i = 0; if (typeof Symbol === \"undefined\" || o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } i = o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](); return i.next.bind(i); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar isSerializableWithoutCircularReference = function isSerializableWithoutCircularReference(o, seen) {\n  if (o === undefined || o === null || typeof o === 'boolean' || typeof o === 'number' || typeof o === 'string') {\n    return true;\n  }\n\n  if (Object.prototype.toString.call(o) !== '[object Object]' && !Array.isArray(o)) {\n    return false;\n  }\n\n  if (seen.has(o)) {\n    return false;\n  }\n\n  seen.add(o);\n\n  if (Array.isArray(o)) {\n    for (var _iterator = _createForOfIteratorHelperLoose(o), _step; !(_step = _iterator()).done;) {\n      var it = _step.value;\n\n      if (!isSerializableWithoutCircularReference(it, new Set(seen))) {\n        return false;\n      }\n    }\n  } else {\n    for (var key in o) {\n      if (!isSerializableWithoutCircularReference(o[key], new Set(seen))) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\nexport default function isSerializable(o) {\n  return isSerializableWithoutCircularReference(o, new Set());\n}","map":{"version":3,"sources":["isSerializable.tsx"],"names":["isSerializableWithoutCircularReference","o","Object","Array","seen"],"mappings":";;;;;;AAAA,IAAMA,sCAAsC,GAAG,SAAzCA,sCAAyC,CAAA,CAAA,EAAA,IAAA,EAGjC;AACZ,MACEC,CAAC,KAADA,SAAAA,IACAA,CAAC,KADDA,IAAAA,IAEA,OAAA,CAAA,KAFAA,SAAAA,IAGA,OAAA,CAAA,KAHAA,QAAAA,IAIA,OAAA,CAAA,KALF,QAAA,EAME;AACA,WAAA,IAAA;AACD;;AAED,MACEC,MAAM,CAANA,SAAAA,CAAAA,QAAAA,CAAAA,IAAAA,CAAAA,CAAAA,MAAAA,iBAAAA,IACA,CAACC,KAAK,CAALA,OAAAA,CAFH,CAEGA,CAFH,EAGE;AACA,WAAA,KAAA;AACD;;AAED,MAAIC,IAAI,CAAJA,GAAAA,CAAJ,CAAIA,CAAJ,EAAiB;AACf,WAAA,KAAA;AACD;;AAEDA,EAAAA,IAAI,CAAJA,GAAAA,CAAAA,CAAAA;;AAEA,MAAID,KAAK,CAALA,OAAAA,CAAJ,CAAIA,CAAJ,EAAsB;AACpB,yDAAA,CAAA,wCAAoB;AAAA,UAApB,EAAoB;;AAClB,UAAI,CAACH,sCAAsC,CAAA,EAAA,EAAK,IAAA,GAAA,CAAhD,IAAgD,CAAL,CAA3C,EAAqE;AACnE,eAAA,KAAA;AACD;AACF;AALH,GAAA,MAMO;AACL,SAAK,IAAL,GAAA,IAAA,CAAA,EAAqB;AACnB,UAAI,CAACA,sCAAsC,CAACC,CAAC,CAAF,GAAE,CAAF,EAAS,IAAA,GAAA,CAApD,IAAoD,CAAT,CAA3C,EAAyE;AACvE,eAAA,KAAA;AACD;AACF;AACF;;AAED,SAAA,IAAA;AAzCF,CAAA;;AA4CA,eAAe,SAAA,cAAA,CAAA,CAAA,EAAmD;AAChE,SAAOD,sCAAsC,CAAA,CAAA,EAAI,IAAjD,GAAiD,EAAJ,CAA7C;AACD","sourcesContent":["const isSerializableWithoutCircularReference = (\n  o: { [key: string]: any },\n  seen: Set<any>\n): boolean => {\n  if (\n    o === undefined ||\n    o === null ||\n    typeof o === 'boolean' ||\n    typeof o === 'number' ||\n    typeof o === 'string'\n  ) {\n    return true;\n  }\n\n  if (\n    Object.prototype.toString.call(o) !== '[object Object]' &&\n    !Array.isArray(o)\n  ) {\n    return false;\n  }\n\n  if (seen.has(o)) {\n    return false;\n  }\n\n  seen.add(o);\n\n  if (Array.isArray(o)) {\n    for (const it of o) {\n      if (!isSerializableWithoutCircularReference(it, new Set<any>(seen))) {\n        return false;\n      }\n    }\n  } else {\n    for (const key in o) {\n      if (!isSerializableWithoutCircularReference(o[key], new Set<any>(seen))) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\nexport default function isSerializable(o: { [key: string]: any }) {\n  return isSerializableWithoutCircularReference(o, new Set<any>());\n}\n"]},"metadata":{},"sourceType":"module"}