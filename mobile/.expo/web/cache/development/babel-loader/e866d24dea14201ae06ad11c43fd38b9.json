{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nvar ANDROID_VERSION_LOLLIPOP = 21;\nexport default function TouchableItem(_ref) {\n  var _ref$borderless = _ref.borderless,\n      borderless = _ref$borderless === void 0 ? false : _ref$borderless,\n      _ref$pressColor = _ref.pressColor,\n      pressColor = _ref$pressColor === void 0 ? 'rgba(0, 0, 0, .32)' : _ref$pressColor,\n      style = _ref.style,\n      children = _ref.children,\n      rest = _objectWithoutProperties(_ref, [\"borderless\", \"pressColor\", \"style\", \"children\"]);\n\n  if (Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP) {\n    return React.createElement(TouchableNativeFeedback, _extends({}, rest, {\n      useForeground: TouchableNativeFeedback.canUseNativeForeground(),\n      background: TouchableNativeFeedback.Ripple(pressColor, borderless)\n    }), React.createElement(View, {\n      style: style\n    }, React.Children.only(children)));\n  } else {\n    return React.createElement(TouchableOpacity, _extends({\n      style: style\n    }, rest), children);\n  }\n}","map":{"version":3,"sources":["TouchableItem.tsx"],"names":["ANDROID_VERSION_LOLLIPOP","borderless","pressColor","children","rest","Platform","TouchableNativeFeedback","style","React"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;;AAkBA,IAAMA,wBAAwB,GAA9B,EAAA;AAEA,eAAe,SAAA,aAAA,CAAA,IAAA,EAML;AAAA,wBAAA,IAAA,CALRC,UAKQ;AAAA,MALRA,UAKQ,gCAN4B,KAM5B;AAAA,wBAAA,IAAA,CAJRC,UAIQ;AAAA,MAJRA,UAIQ,gCAN4B,oBAM5B;AAAA,MAN4B,KAM5B,GAAA,IAAA,CAN4B,KAM5B;AAAA,MAFRC,QAEQ,GAAA,IAAA,CAFRA,QAEQ;AAAA,MADLC,IACK,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,YAAA,EAAA,YAAA,EAAA,OAAA,EAAA,UAAA,CAAA,CAAA;;AASR,MACEC,QAAQ,CAARA,EAAAA,KAAAA,SAAAA,IACAA,QAAQ,CAARA,OAAAA,IAFF,wBAAA,EAGE;AACA,WACE,KAAA,CAAA,aAAA,CAAA,uBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,MAAA,aAAa,EAAEC,uBAAuB,CAFxC,sBAEiBA,EAFjB;AAGE,MAAA,UAAU,EAAEA,uBAAuB,CAAvBA,MAAAA,CAAAA,UAAAA,EAAAA,UAAAA;AAHd,KAAA,CAAA,EAKE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,KAAK,EAAEC;AAAb,KAAA,EAAqBC,KAAK,CAALA,QAAAA,CAAAA,IAAAA,CANzB,QAMyBA,CAArB,CALF,CADF;AAJF,GAAA,MAaO;AACL,WACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,QAAA,CAAA;AAAkB,MAAA,KAAK,EAAED;AAAzB,KAAA,EAAA,IAAA,CAAA,EADF,QACE,CADF;AAKD;AACF","sourcesContent":["/**\n * TouchableItem provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity to handle platform differences.\n *\n * On Android, you can pass the props of TouchableNativeFeedback.\n * On other platforms, you can pass the props of TouchableOpacity.\n */\nimport * as React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  View,\n  ViewProps,\n} from 'react-native';\n\nexport type Props = ViewProps & {\n  pressColor?: string;\n  disabled?: boolean;\n  borderless?: boolean;\n  delayPressIn?: number;\n  onPress?: () => void;\n  children: React.ReactNode;\n};\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\nexport default function TouchableItem({\n  borderless = false,\n  pressColor = 'rgba(0, 0, 0, .32)',\n  style,\n  children,\n  ...rest\n}: Props) {\n  /*\n   * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n   * therefore only enable it on Android Lollipop and above.\n   *\n   * All touchables on Android should have the ripple effect according to\n   * platform design guidelines.\n   * We need to pass the background prop to specify a borderless ripple effect.\n   */\n  if (\n    Platform.OS === 'android' &&\n    Platform.Version >= ANDROID_VERSION_LOLLIPOP\n  ) {\n    return (\n      <TouchableNativeFeedback\n        {...rest}\n        useForeground={TouchableNativeFeedback.canUseNativeForeground()}\n        background={TouchableNativeFeedback.Ripple(pressColor, borderless)}\n      >\n        <View style={style}>{React.Children.only(children)}</View>\n      </TouchableNativeFeedback>\n    );\n  } else {\n    return (\n      <TouchableOpacity style={style} {...rest}>\n        {children}\n      </TouchableOpacity>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}