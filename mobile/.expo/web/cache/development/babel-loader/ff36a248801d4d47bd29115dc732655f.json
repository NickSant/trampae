{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { CommonActions } from '@react-navigation/routers';\nimport EnsureSingleNavigator from \"./EnsureSingleNavigator\";\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport UnhandledActionContext from \"./UnhandledActionContext\";\nimport { ScheduleUpdateContext } from \"./useScheduleUpdate\";\nimport useFocusedListeners from \"./useFocusedListeners\";\nimport useStateGetters from \"./useStateGetters\";\nimport useOptionsGetters from \"./useOptionsGetters\";\nimport useEventEmitter from \"./useEventEmitter\";\nimport useSyncState from \"./useSyncState\";\nimport isSerializable from \"./isSerializable\";\nvar NOT_INITIALIZED_ERROR = \"The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/navigating-without-navigation-prop#handling-initialization for more details.\";\nvar hasWarnedForSerialization = false;\nObject.defineProperty(global, 'REACT_NAVIGATION_REDUX_DEVTOOLS_EXTENSION_INTEGRATION_ENABLED', {\n  set: function set(_) {\n    console.warn(\"Redux devtools extension integration can be enabled with the '@react-navigation/devtools' package. For more details, see https://reactnavigation.org/docs/devtools\");\n  }\n});\n\nvar getPartialState = function getPartialState(state) {\n  if (state === undefined) {\n    return;\n  }\n\n  var key = state.key,\n      routeNames = state.routeNames,\n      partialState = _objectWithoutProperties(state, [\"key\", \"routeNames\"]);\n\n  return _objectSpread(_objectSpread({}, partialState), {}, {\n    stale: true,\n    routes: state.routes.map(function (route) {\n      if (route.state === undefined) {\n        return route;\n      }\n\n      return _objectSpread(_objectSpread({}, route), {}, {\n        state: getPartialState(route.state)\n      });\n    })\n  });\n};\n\nvar BaseNavigationContainer = React.forwardRef(function BaseNavigationContainer(_ref, ref) {\n  var initialState = _ref.initialState,\n      onStateChange = _ref.onStateChange,\n      independent = _ref.independent,\n      children = _ref.children;\n  var parent = React.useContext(NavigationStateContext);\n\n  if (!parent.isDefault && !independent) {\n    throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitely. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");\n  }\n\n  var _useSyncState = useSyncState(function () {\n    return getPartialState(initialState == null ? undefined : initialState);\n  }),\n      _useSyncState2 = _slicedToArray(_useSyncState, 5),\n      state = _useSyncState2[0],\n      getState = _useSyncState2[1],\n      setState = _useSyncState2[2],\n      scheduleUpdate = _useSyncState2[3],\n      flushUpdates = _useSyncState2[4];\n\n  var isFirstMountRef = React.useRef(true);\n  var navigatorKeyRef = React.useRef();\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  var _useFocusedListeners = useFocusedListeners(),\n      listeners = _useFocusedListeners.listeners,\n      addFocusedListener = _useFocusedListeners.addListener;\n\n  var _useStateGetters = useStateGetters(),\n      getStateForRoute = _useStateGetters.getStateForRoute,\n      addStateGetter = _useStateGetters.addStateGetter;\n\n  var dispatch = function dispatch(action) {\n    if (listeners[0] == null) {\n      throw new Error(NOT_INITIALIZED_ERROR);\n    }\n\n    listeners[0](function (navigation) {\n      return navigation.dispatch(action);\n    });\n  };\n\n  var canGoBack = function canGoBack() {\n    if (listeners[0] == null) {\n      return false;\n    }\n\n    var _listeners$ = listeners[0](function (navigation) {\n      return navigation.canGoBack();\n    }),\n        result = _listeners$.result,\n        handled = _listeners$.handled;\n\n    if (handled) {\n      return result;\n    } else {\n      return false;\n    }\n  };\n\n  var resetRoot = React.useCallback(function (state) {\n    setState(state);\n  }, [setState]);\n  var getRootState = React.useCallback(function () {\n    return getStateForRoute('root');\n  }, [getStateForRoute]);\n  var getCurrentRoute = React.useCallback(function () {\n    var state = getRootState();\n\n    if (state === undefined) {\n      return undefined;\n    }\n\n    while (state.routes[state.index].state !== undefined) {\n      state = state.routes[state.index].state;\n    }\n\n    return state.routes[state.index];\n  }, [getRootState]);\n  var emitter = useEventEmitter();\n\n  var _useOptionsGetters = useOptionsGetters({}),\n      addOptionsGetter = _useOptionsGetters.addOptionsGetter,\n      getCurrentOptions = _useOptionsGetters.getCurrentOptions;\n\n  React.useImperativeHandle(ref, function () {\n    return _objectSpread(_objectSpread(_objectSpread({}, Object.keys(CommonActions).reduce(function (acc, name) {\n      acc[name] = function () {\n        return dispatch(CommonActions[name].apply(CommonActions, arguments));\n      };\n\n      return acc;\n    }, {})), emitter.create('root')), {}, {\n      resetRoot: resetRoot,\n      dispatch: dispatch,\n      canGoBack: canGoBack,\n      getRootState: getRootState,\n      dangerouslyGetState: function dangerouslyGetState() {\n        return state;\n      },\n      dangerouslyGetParent: function dangerouslyGetParent() {\n        return undefined;\n      },\n      getCurrentRoute: getCurrentRoute,\n      getCurrentOptions: getCurrentOptions\n    });\n  });\n  var onDispatchAction = React.useCallback(function (action, noop) {\n    emitter.emit({\n      type: '__unsafe_action__',\n      data: {\n        action: action,\n        noop: noop\n      }\n    });\n  }, [emitter]);\n  var onOptionsChange = React.useCallback(function (options) {\n    emitter.emit({\n      type: 'options',\n      data: {\n        options: options\n      }\n    });\n  }, [emitter]);\n  var builderContext = React.useMemo(function () {\n    return {\n      addFocusedListener: addFocusedListener,\n      addStateGetter: addStateGetter,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange\n    };\n  }, [addFocusedListener, addStateGetter, onDispatchAction, onOptionsChange]);\n  var scheduleContext = React.useMemo(function () {\n    return {\n      scheduleUpdate: scheduleUpdate,\n      flushUpdates: flushUpdates\n    };\n  }, [scheduleUpdate, flushUpdates]);\n  var context = React.useMemo(function () {\n    return {\n      state: state,\n      getState: getState,\n      setState: setState,\n      getKey: getKey,\n      setKey: setKey,\n      addOptionsGetter: addOptionsGetter\n    };\n  }, [getKey, getState, setKey, setState, state, addOptionsGetter]);\n  var onStateChangeRef = React.useRef(onStateChange);\n  React.useEffect(function () {\n    onStateChangeRef.current = onStateChange;\n  });\n  React.useEffect(function () {\n    if (process.env.NODE_ENV !== 'production') {\n      if (state !== undefined && !isSerializable(state) && !hasWarnedForSerialization) {\n        hasWarnedForSerialization = true;\n        console.warn(\"Non-serializable values were found in the navigation state, which can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.\");\n      }\n    }\n\n    emitter.emit({\n      type: 'state',\n      data: {\n        state: state\n      }\n    });\n\n    if (!isFirstMountRef.current && onStateChangeRef.current) {\n      onStateChangeRef.current(getRootState());\n    }\n\n    isFirstMountRef.current = false;\n  }, [getRootState, emitter, state]);\n  var onUnhandledAction = React.useCallback(function (action) {\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n\n    var payload = action.payload;\n    var message = \"The action '\".concat(action.type, \"'\").concat(payload ? \" with payload \".concat(JSON.stringify(action.payload)) : '', \" was not handled by any navigator.\");\n\n    switch (action.type) {\n      case 'NAVIGATE':\n      case 'PUSH':\n      case 'REPLACE':\n      case 'JUMP_TO':\n        if (payload === null || payload === void 0 ? void 0 : payload.name) {\n          message += \"\\n\\nDo you have a screen named '\".concat(payload.name, \"'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.\");\n        } else {\n          message += \"\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.\";\n        }\n\n        break;\n\n      case 'GO_BACK':\n      case 'POP':\n      case 'POP_TO_TOP':\n        message += \"\\n\\nIs there any screen to go back to?\";\n        break;\n\n      case 'OPEN_DRAWER':\n      case 'CLOSE_DRAWER':\n      case 'TOGGLE_DRAWER':\n        message += \"\\n\\nIs your screen inside a Drawer navigator?\";\n        break;\n    }\n\n    message += \"\\n\\nThis is a development-only warning and won't be shown in production.\";\n    console.error(message);\n  }, []);\n  return React.createElement(ScheduleUpdateContext.Provider, {\n    value: scheduleContext\n  }, React.createElement(NavigationBuilderContext.Provider, {\n    value: builderContext\n  }, React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, React.createElement(UnhandledActionContext.Provider, {\n    value: onUnhandledAction\n  }, React.createElement(EnsureSingleNavigator, null, children)))));\n});\nexport default BaseNavigationContainer;","map":{"version":3,"sources":["BaseNavigationContainer.tsx"],"names":["NOT_INITIALIZED_ERROR","hasWarnedForSerialization","Object","set","console","getPartialState","state","routeNames","stale","routes","route","BaseNavigationContainer","children","parent","React","useSyncState","initialState","isFirstMountRef","navigatorKeyRef","getKey","setKey","key","addListener","addFocusedListener","useFocusedListeners","addStateGetter","useStateGetters","dispatch","action","listeners","navigation","canGoBack","handled","resetRoot","setState","getRootState","getStateForRoute","getCurrentRoute","emitter","useEventEmitter","getCurrentOptions","useOptionsGetters","acc","dangerouslyGetState","dangerouslyGetParent","onDispatchAction","type","data","noop","onOptionsChange","options","builderContext","scheduleContext","scheduleUpdate","flushUpdates","context","getState","addOptionsGetter","onStateChangeRef","process","isSerializable","onUnhandledAction","payload","message","JSON"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  Route,\n  NavigationState,\n  InitialState,\n  PartialState,\n  NavigationAction,\n} from '@react-navigation/routers';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useFocusedListeners from './useFocusedListeners';\nimport useStateGetters from './useStateGetters';\nimport useOptionsGetters from './useOptionsGetters';\nimport useEventEmitter from './useEventEmitter';\nimport useSyncState from './useSyncState';\nimport isSerializable from './isSerializable';\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerRef,\n  NavigationContainerProps,\n} from './types';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst NOT_INITIALIZED_ERROR =\n  \"The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/navigating-without-navigation-prop#handling-initialization for more details.\";\n\nlet hasWarnedForSerialization = false;\n\n/**\n * Migration instructions for removal of devtools from core\n */\nObject.defineProperty(\n  global,\n  'REACT_NAVIGATION_REDUX_DEVTOOLS_EXTENSION_INTEGRATION_ENABLED',\n  {\n    set(_) {\n      console.warn(\n        \"Redux devtools extension integration can be enabled with the '@react-navigation/devtools' package. For more details, see https://reactnavigation.org/docs/devtools\"\n      );\n    },\n  }\n);\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map((route) => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref?: React.Ref<NavigationContainerRef>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitely. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [\n      state,\n      getState,\n      setState,\n      scheduleUpdate,\n      flushUpdates,\n    ] = useSyncState<State>(() =>\n      getPartialState(initialState == null ? undefined : initialState)\n    );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const {\n      listeners,\n      addListener: addFocusedListener,\n    } = useFocusedListeners();\n\n    const { getStateForRoute, addStateGetter } = useStateGetters();\n\n    const dispatch = (\n      action: NavigationAction | ((state: NavigationState) => NavigationAction)\n    ) => {\n      if (listeners[0] == null) {\n        throw new Error(NOT_INITIALIZED_ERROR);\n      }\n\n      listeners[0]((navigation) => navigation.dispatch(action));\n    };\n\n    const canGoBack = () => {\n      if (listeners[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners[0]((navigation) =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    };\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        setState(state);\n      },\n      [setState]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return getStateForRoute('root');\n    }, [getStateForRoute]);\n\n    const getCurrentRoute = React.useCallback(() => {\n      let state = getRootState();\n      if (state === undefined) {\n        return undefined;\n      }\n      while (state.routes[state.index].state !== undefined) {\n        state = state.routes[state.index].state as NavigationState;\n      }\n      return state.routes[state.index];\n    }, [getRootState]);\n\n    const emitter = useEventEmitter<NavigationContainerEventMap>();\n\n    const { addOptionsGetter, getCurrentOptions } = useOptionsGetters({});\n\n    React.useImperativeHandle(ref, () => ({\n      ...(Object.keys(CommonActions) as (keyof typeof CommonActions)[]).reduce<\n        any\n      >((acc, name) => {\n        acc[name] = (...args: any[]) =>\n          dispatch(\n            CommonActions[name](\n              // @ts-expect-error: we can't know the type statically\n              ...args\n            )\n          );\n        return acc;\n      }, {}),\n      ...emitter.create('root'),\n      resetRoot,\n      dispatch,\n      canGoBack,\n      getRootState,\n      dangerouslyGetState: () => state,\n      dangerouslyGetParent: () => undefined,\n      getCurrentRoute,\n      getCurrentOptions,\n    }));\n\n    const onDispatchAction = React.useCallback(\n      (action: NavigationAction, noop: boolean) => {\n        emitter.emit({ type: '__unsafe_action__', data: { action, noop } });\n      },\n      [emitter]\n    );\n\n    const onOptionsChange = React.useCallback(\n      (options) => {\n        emitter.emit({\n          type: 'options',\n          data: { options },\n        });\n      },\n      [emitter]\n    );\n\n    const builderContext = React.useMemo(\n      () => ({\n        addFocusedListener,\n        addStateGetter,\n        onDispatchAction,\n        onOptionsChange,\n      }),\n      [addFocusedListener, addStateGetter, onDispatchAction, onOptionsChange]\n    );\n\n    const scheduleContext = React.useMemo(\n      () => ({ scheduleUpdate, flushUpdates }),\n      [scheduleUpdate, flushUpdates]\n    );\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        addOptionsGetter,\n      }),\n      [getKey, getState, setKey, setState, state, addOptionsGetter]\n    );\n\n    const onStateChangeRef = React.useRef(onStateChange);\n\n    React.useEffect(() => {\n      onStateChangeRef.current = onStateChange;\n    });\n\n    React.useEffect(() => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (\n          state !== undefined &&\n          !isSerializable(state) &&\n          !hasWarnedForSerialization\n        ) {\n          hasWarnedForSerialization = true;\n\n          console.warn(\n            \"Non-serializable values were found in the navigation state, which can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.\"\n          );\n        }\n      }\n\n      emitter.emit({ type: 'state', data: { state } });\n\n      if (!isFirstMountRef.current && onStateChangeRef.current) {\n        onStateChangeRef.current(getRootState());\n      }\n\n      isFirstMountRef.current = false;\n    }, [getRootState, emitter, state]);\n\n    const onUnhandledAction = React.useCallback((action: NavigationAction) => {\n      if (process.env.NODE_ENV === 'production') {\n        return;\n      }\n\n      const payload: Record<string, any> | undefined = action.payload;\n\n      let message = `The action '${action.type}'${\n        payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n      } was not handled by any navigator.`;\n\n      switch (action.type) {\n        case 'NAVIGATE':\n        case 'PUSH':\n        case 'REPLACE':\n        case 'JUMP_TO':\n          if (payload?.name) {\n            message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n          } else {\n            message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n          }\n\n          break;\n        case 'GO_BACK':\n        case 'POP':\n        case 'POP_TO_TOP':\n          message += `\\n\\nIs there any screen to go back to?`;\n          break;\n        case 'OPEN_DRAWER':\n        case 'CLOSE_DRAWER':\n        case 'TOGGLE_DRAWER':\n          message += `\\n\\nIs your screen inside a Drawer navigator?`;\n          break;\n      }\n\n      message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n      console.error(message);\n    }, []);\n\n    return (\n      <ScheduleUpdateContext.Provider value={scheduleContext}>\n        <NavigationBuilderContext.Provider value={builderContext}>\n          <NavigationStateContext.Provider value={context}>\n            <UnhandledActionContext.Provider value={onUnhandledAction}>\n              <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n            </UnhandledActionContext.Provider>\n          </NavigationStateContext.Provider>\n        </NavigationBuilderContext.Provider>\n      </ScheduleUpdateContext.Provider>\n    );\n  }\n);\n\nexport default BaseNavigationContainer;\n"]},"metadata":{},"sourceType":"module"}