{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport NavigationStateContext from \"./NavigationStateContext\";\nimport StaticContainer from \"./StaticContainer\";\nimport EnsureSingleNavigator from \"./EnsureSingleNavigator\";\nimport useOptionsGetters from \"./useOptionsGetters\";\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport useFocusEffect from \"./useFocusEffect\";\nexport default function SceneView(_ref) {\n  var screen = _ref.screen,\n      route = _ref.route,\n      navigation = _ref.navigation,\n      getState = _ref.getState,\n      setState = _ref.setState,\n      options = _ref.options;\n  var navigatorKeyRef = React.useRef();\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      onOptionsChange = _React$useContext.onOptionsChange;\n\n  var getKey = React.useCallback(function () {\n    return navigatorKeyRef.current;\n  }, []);\n  var optionsRef = React.useRef(options);\n  var getOptions = React.useCallback(function () {\n    return optionsRef.current;\n  }, []);\n\n  var _useOptionsGetters = useOptionsGetters({\n    key: route.key,\n    getState: getState,\n    getOptions: getOptions\n  }),\n      addOptionsGetter = _useOptionsGetters.addOptionsGetter,\n      hasAnyChildListener = _useOptionsGetters.hasAnyChildListener;\n\n  var optionsChange = React.useCallback(function () {\n    optionsRef.current = options;\n\n    if (!hasAnyChildListener) {\n      onOptionsChange(options);\n    }\n  }, [onOptionsChange, options, hasAnyChildListener]);\n  useFocusEffect(optionsChange);\n  var setKey = React.useCallback(function (key) {\n    navigatorKeyRef.current = key;\n  }, []);\n  var getCurrentState = React.useCallback(function () {\n    var state = getState();\n    var currentRoute = state.routes.find(function (r) {\n      return r.key === route.key;\n    });\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n  var setCurrentState = React.useCallback(function (child) {\n    var state = getState();\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      routes: state.routes.map(function (r) {\n        return r.key === route.key ? _objectSpread(_objectSpread({}, r), {}, {\n          state: child\n        }) : r;\n      })\n    }));\n  }, [getState, route.key, setState]);\n  var context = React.useMemo(function () {\n    return {\n      state: route.state,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey: getKey,\n      setKey: setKey,\n      addOptionsGetter: addOptionsGetter\n    };\n  }, [getCurrentState, getKey, route.state, setCurrentState, setKey, addOptionsGetter]);\n  return React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, React.createElement(EnsureSingleNavigator, null, React.createElement(StaticContainer, {\n    name: screen.name,\n    render: screen.component || screen.children,\n    navigation: navigation,\n    route: route\n  }, 'component' in screen && screen.component !== undefined ? React.createElement(screen.component, {\n    navigation: navigation,\n    route: route\n  }) : 'children' in screen && screen.children !== undefined ? screen.children({\n    navigation: navigation,\n    route: route\n  }) : null)));\n}","map":{"version":3,"sources":["SceneView.tsx"],"names":["options","navigatorKeyRef","React","onOptionsChange","getKey","optionsRef","getOptions","hasAnyChildListener","useOptionsGetters","key","route","getState","optionsChange","useFocusEffect","setKey","getCurrentState","state","currentRoute","r","setCurrentState","child","setState","routes","context","addOptionsGetter","screen","navigation"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  Route,\n  ParamListBase,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport useOptionsGetters from './useOptionsGetters';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport useFocusEffect from './useFocusEffect';\nimport type { NavigationProp, RouteConfig, EventMapBase } from './types';\n\ntype Props<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  screen: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string> & {\n    state?: NavigationState | PartialState<NavigationState>;\n  };\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  screen,\n  route,\n  navigation,\n  getState,\n  setState,\n  options,\n}: Props<State, ScreenOptions, EventMap>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const { onOptionsChange } = React.useContext(NavigationBuilderContext);\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n  const optionsRef = React.useRef<object | undefined>(options);\n  const getOptions = React.useCallback(() => optionsRef.current, []);\n\n  const { addOptionsGetter, hasAnyChildListener } = useOptionsGetters({\n    key: route.key,\n    getState,\n    getOptions,\n  });\n\n  const optionsChange = React.useCallback(() => {\n    optionsRef.current = options;\n    if (!hasAnyChildListener) {\n      onOptionsChange(options);\n    }\n  }, [onOptionsChange, options, hasAnyChildListener]);\n\n  useFocusEffect(optionsChange);\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const context = React.useMemo(\n    () => ({\n      state: route.state,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      addOptionsGetter,\n    }),\n    [\n      getCurrentState,\n      getKey,\n      route.state,\n      setCurrentState,\n      setKey,\n      addOptionsGetter,\n    ]\n  );\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          // @ts-expect-error: these properties exist on screen, but TS is confused\n          render={screen.component || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {'component' in screen && screen.component !== undefined ? (\n            <screen.component navigation={navigation} route={route} />\n          ) : 'children' in screen && screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}