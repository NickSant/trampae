{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nimport isArrayEqual from \"./isArrayEqual\";\nexport default function useOnGetState(_ref) {\n  var getStateForRoute = _ref.getStateForRoute,\n      getState = _ref.getState;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      addStateGetter = _React$useContext.addStateGetter;\n\n  var route = React.useContext(NavigationRouteContext);\n  var key = route ? route.key : 'root';\n  var getRehydratedState = React.useCallback(function () {\n    var state = getState();\n    var routes = state.routes.map(function (route) {\n      var childState = getStateForRoute(route.key);\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return _objectSpread(_objectSpread({}, route), {}, {\n        state: childState\n      });\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      routes: routes\n    });\n  }, [getState, getStateForRoute]);\n  React.useEffect(function () {\n    return addStateGetter === null || addStateGetter === void 0 ? void 0 : addStateGetter(key, getRehydratedState);\n  }, [addStateGetter, getRehydratedState, key]);\n}","map":{"version":3,"sources":["useOnGetState.tsx"],"names":["getState","addStateGetter","React","route","key","getRehydratedState","state","routes","childState","getStateForRoute","isArrayEqual"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,wBAAA;AACA,OAAA,sBAAA;AACA,OAAA,YAAA;AAEA,eAAe,SAAA,aAAA,OAMZ;AAAA,MANmC,gBAMnC,QANmC,gBAMnC;AAAA,MAJDA,QAIC,QAJDA,QAIC;;AAAA,0BAC0BE,KAAK,CAALA,UAAAA,CAA3B,wBAA2BA,CAD1B;AAAA,MACOD,cADP,qBACOA,cADP;;AAED,MAAME,KAAK,GAAGD,KAAK,CAALA,UAAAA,CAAd,sBAAcA,CAAd;AACA,MAAME,GAAG,GAAGD,KAAK,GAAGA,KAAK,CAAR,GAAA,GAAjB,MAAA;AAEA,MAAME,kBAAkB,GAAG,KAAK,CAAL,WAAA,CAAkB,YAAM;AACjD,QAAMC,KAAK,GAAGN,QADmC,EACjD;AAGA,QAAMO,MAAM,GAAG,KAAK,CAAL,MAAA,CAAA,GAAA,CAAkBJ,UAAAA,KAAD,EAAW;AACzC,UAAMK,UAAU,GAAGC,gBAAgB,CAACN,KAAK,CAAzC,GAAmC,CAAnC;;AAEA,UAAIA,KAAK,CAALA,KAAAA,KAAJ,UAAA,EAAgC;AAC9B,eAAA,KAAA;AACD;;AAED,aAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;AAAmBG,QAAAA,KAAK,EAAEE;AAA1B,OAAA,CAAA;AAPF,KAAe,CAAf;;AAUA,QAAIE,YAAY,CAACJ,KAAK,CAAN,MAAA,EAAhB,MAAgB,CAAhB,EAAwC;AACtC,aAAA,KAAA;AACD;;AAED,WAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA;AAAmBC,MAAAA,MAAAA,EAAAA;AAAnB,KAAA,CAAA;AAlByB,GAAA,EAmBxB,CAAA,QAAA,EAnBH,gBAmBG,CAnBwB,CAA3B;AAqBAL,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,WAAOD,cAAP,KAAA,IAAOA,IAAAA,cAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAAA,cAAc,CAAA,GAAA,EAArB,kBAAqB,CAArB;AADFC,GAAAA,EAEG,CAAA,cAAA,EAAA,kBAAA,EAFHA,GAEG,CAFHA;AAGD","sourcesContent":["import * as React from 'react';\nimport type { NavigationState } from '@react-navigation/routers';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport isArrayEqual from './isArrayEqual';\n\nexport default function useOnGetState({\n  getStateForRoute,\n  getState,\n}: {\n  getStateForRoute: (routeName: string) => NavigationState | undefined;\n  getState: () => NavigationState;\n}) {\n  const { addStateGetter } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState();\n\n    // Avoid returning new route objects if we don't need to\n    const routes = state.routes.map((route) => {\n      const childState = getStateForRoute(route.key);\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return { ...route, state: childState };\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return { ...state, routes };\n  }, [getState, getStateForRoute]);\n\n  React.useEffect(() => {\n    return addStateGetter?.(key, getRehydratedState);\n  }, [addStateGetter, getRehydratedState, key]);\n}\n"]},"metadata":{},"sourceType":"module"}