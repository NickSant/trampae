{"version":3,"sources":["../../src/helpers/Util.js"],"names":["Util","original_value","removedSpaces","mapAcentosHexa","a","A","e","E","i","I","o","O","u","U","value_trim","trim","value_acento","toLowerCase","value","letra","regularExpression","replace","length","letter","charAt","console","log","res","status","message","error","json","Error","end","email","password","process","env","ADMIN_USER","ADMIN_PASS","id","ADMIN_ID_PAYLOAD_JWT","date","Date","getUTCFullYear","getUTCMonth","slice","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","dateTime","toISOString","now","mysqlNowFormat","query","db","raw","result","timeDiff","Object","values"],"mappings":"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","file":"Util.js","sourcesContent":["import 'dotenv/config'\nimport sha1 from 'sha1'\n\nimport db from '../database/connection'\n\nclass Util {\n    constructor(){\n       \n    }\n    clearString(original_value){\n        //remove acentos e espa√ßos vazios!\n        let removedSpaces = '';\n        const mapAcentosHexa = {\n            a : /[\\xE0-\\xE6]/g,\n            A : /[\\xC0-\\xC6]/g,\n            e : /[\\xE8-\\xEB]/g,\n            E : /[\\xC8-\\xCB]/g,\n            i : /[\\xEC-\\xEF]/g,\n            I : /[\\xCC-\\xCF]/g,\n            o : /[\\xF2-\\xF6]/g,\n            O : /[\\xD2-\\xD6]/g,\n            u : /[\\xF9-\\xFC]/g,\n            U : /[\\xD9-\\xDC]/g,\n        };\n        \n        const value_trim = original_value.trim();\n        const value_acento = value_trim.toLowerCase();\n        let value = value_acento;\n        //retirando acentos\n        for( let letra in mapAcentosHexa ){\n            var regularExpression = mapAcentosHexa[letra];\n            value = value.replace( regularExpression, letra );\n        }\n\n        for(let i=0; i < value.length; i++){\n            let letter = value.charAt(i);\n            if(letter !== ' '){\n                removedSpaces += letter;\n            }\n        }\n        console.log(removedSpaces);\n        return removedSpaces;\n    }\n\n    handleError(res, status, message){\n        console.error(message);\n        res.status(status);\n        return res.json({Error:message}).end();\n    }\n\n    isAdmin(email, password){\n        return (email === process.env.ADMIN_USER && sha1(password) === process.env.ADMIN_PASS) ? true : false   \n    }\n\n    isAdminID(id){\n        return (id === process.env.ADMIN_ID_PAYLOAD_JWT) ? true : false\n    }\n\n    mysqlNowFormat(){\n        let date = new Date();\n        date = date.getUTCFullYear() + '-' +\n            ('00' + (date.getUTCMonth()+1)).slice(-2) + '-' +\n            ('00' + date.getUTCDate()).slice(-2) + ' ' + \n            ('00' + date.getUTCHours()).slice(-2) + ':' + \n            ('00' + date.getUTCMinutes()).slice(-2) + ':' + \n            ('00' + date.getUTCSeconds()).slice(-2);\n        return date\n    }\n\n    dateTimeToISO(dateTime){\n        dateTime = dateTime.toISOString().replace(/T/, ' ').replace(/\\..+/, '')\n        return dateTime\n    }\n\n    async timestampDiff(dateTime){\n        try{\n            const now = this.mysqlNowFormat()\n            const query = `select timestampdiff(HOUR, '${dateTime}', '${now}');`\n            \n            const result = await db.raw(query)\n            const timeDiff = Object.values(result[0][0]) [0]\n                \n            return timeDiff\n        }catch(e){\n            throw new Error(e)\n        }\n    }\n\n\n}\nexport default Util;"]}