{"version":3,"sources":["../../src/helpers/validation.js"],"names":["module","exports","validateBody","schema","req","res","next","result","Joi","validate","body","error","status","json","value","schemas","signInSchema","object","keys","email","string","required","password","min","signUpSchema","name","whatsapp","phoneValidator","phone","mobile","city","uf","length","serviceSchema","title","max","description","price","number","number_participants","id_category","service_provider_id","default"],"mappings":";;AAAA;;;;AACA;;;;;;AAGAA,OAAOC,OAAP,GAAiB;AACbC,gBAAc,sBAACC,MAAD,EAAY;AACxB,WAAO,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACzB,UAAMC,SAASC,cAAIC,QAAJ,CAAaL,IAAIM,IAAjB,EAAuBP,MAAvB,CAAf;;AAEA,UAAGI,OAAOI,KAAV,EAAgB;AAAC,eAAON,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBN,OAAOI,KAA5B,CAAP;AAA0C;AAC3D,UAAG,CAACP,IAAIU,KAAR,EAAc;AAACV,YAAIU,KAAJ,GAAY,EAAZ;AAAe;;AAE9BV,UAAIU,KAAJ,CAAU,MAAV,IAAoBP,OAAOO,KAA3B;AACAR;AACD,KARD;AASD,GAXY;AAYbS,WAAS;AACPC,kBAAcR,cAAIS,MAAJ,GAAaC,IAAb,CAAkB;AAC9BC,aAAOX,cAAIY,MAAJ,GAAaD,KAAb,GAAqBE,QAArB,EADuB;AAE9BC,gBAAUd,cAAIY,MAAJ,GAAaG,GAAb,CAAiB,CAAjB,EAAoBF,QAApB;AAFoB,KAAlB,CADP;AAKPG,kBAAchB,cAAIS,MAAJ,GAAaC,IAAb,CAAkB;AAC9BO,YAAMjB,cAAIY,MAAJ,GAAaC,QAAb,EADwB;AAE9BF,aAAOX,cAAIY,MAAJ,GAAaC,QAAb,EAFuB;AAG9BC,gBAAUd,cAAIY,MAAJ,GAAaG,GAAb,CAAiB,CAAjB,EAAoBF,QAApB,EAHoB;AAI9BK,gBAAUC,4BAAeC,KAAf,GAAuBC,MAAvB,GAAgCR,QAAhC,EAJoB;AAK9BS,YAAMtB,cAAIY,MAAJ,GAAaC,QAAb,EALwB;AAM9BU,UAAIvB,cAAIY,MAAJ,GAAaY,MAAb,CAAoB,CAApB,EAAuBX,QAAvB;AAN0B,KAAlB,CALP;AAaPY,mBAAezB,cAAIS,MAAJ,GAAaC,IAAb,CAAkB;AAC/BgB,aAAO1B,cAAIY,MAAJ,GAAae,GAAb,CAAiB,EAAjB,EAAqBd,QAArB,EADwB;AAE/Be,mBAAa5B,cAAIY,MAAJ,GAAae,GAAb,CAAiB,GAAjB,CAFkB;AAG/BE,aAAO7B,cAAI8B,MAAJ,GAAajB,QAAb,EAHwB;AAI/BkB,2BAAqB/B,cAAI8B,MAAJ,EAJU;AAK/BE,mBAAahC,cAAI8B,MAAJ,EALkB;AAM/BR,YAAMtB,cAAIY,MAAJ,GAAaC,QAAb,EANyB;AAO/BU,UAAIvB,cAAIY,MAAJ,GAAaY,MAAb,CAAoB,CAApB,EAAuBX,QAAvB,EAP2B;AAQ/BoB,2BAAqBjC,cAAIY,MAAJ,GAAasB,OAAb,CAAqB,IAArB;AARU,KAAlB;AAbR;AAZI,CAAjB","file":"validation.js","sourcesContent":["import Joi from 'joi'\nimport phoneValidator from 'joi-phone-validator'\n\n\nmodule.exports = {\n    validateBody: (schema) => {\n      return (req, res, next) => {\n        const result = Joi.validate(req.body, schema);\n        \n        if(result.error){return res.status(400).json(result.error)}\n        if(!req.value){req.value = {}}\n\n        req.value['body'] = result.value\n        next();\n      }\n    },\n    schemas: {\n      signInSchema: Joi.object().keys({\n        email: Joi.string().email().required(),\n        password: Joi.string().min(6).required()\n      }),\n      signUpSchema: Joi.object().keys({\n        name: Joi.string().required(),\n        email: Joi.string().required(),\n        password: Joi.string().min(6).required(),\n        whatsapp: phoneValidator.phone().mobile().required(),\n        city: Joi.string().required(),\n        uf: Joi.string().length(2).required()\n      }),\n      serviceSchema: Joi.object().keys({\n        title: Joi.string().max(20).required(),\n        description: Joi.string().max(200),\n        price: Joi.number().required(),\n        number_participants: Joi.number(),\n        id_category: Joi.number(),\n        city: Joi.string().required(),\n        uf: Joi.string().length(2).required(),\n        service_provider_id: Joi.string().default(null)\n      })\n    } \n}"]}