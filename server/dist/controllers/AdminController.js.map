{"version":3,"sources":["../../src/controllers/AdminController.js"],"names":["jwt","Util","handleError","clearString","isAdmin","mailer","Mailer","u","Model","s","login","req","res","headers","authorization","split","hashTyp","hash","Buffer","from","toString","email","password","adminToken","generateToken","admin_id","process","env","ADMIN_ID_PAYLOAD_JWT","json","name","mail","ADMIN_USER","token_admin","end","listUsers","all","deleteUser","id","body","get","user","undefined","delete","deleted","message","listServices","deleteService"],"mappings":"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","file":"AdminController.js","sourcesContent":["import connection from '../database/connection'\nimport * as jwt from '../setup/jwt'\nimport Util from '../helpers/Util'\nimport Mailer from '../helpers/mailer'\nimport argon2, { hash } from 'argon2' //algoritmo de hash\n\n\nimport Model from '../models/Model'\nimport { constants } from 'fs'\n\nconst { handleError, clearString, isAdmin } = new Util()\nconst mailer = new Mailer()\n\nconst u = new Model('users')\nconst s = new Model('services')\n\nexport default {\n    async login(req, res){    \n        try{\n            //confirmando admin\n            const [hashTyp, hash] = req.headers.authorization.split(' ') //Basic Authenticate. Formato: Basic HASH\n            const [email, password] = Buffer.from(hash, 'base64').toString().split(':') //Buffer - descriptografa um hash -> separado por :\n\n            if( !isAdmin(email, password) ) return handleError(res, 401, 'Não autorizado!')\n        \n            const adminToken = jwt.generateToken({admin_id: process.env.ADMIN_ID_PAYLOAD_JWT})\n\n            return res.json({\n                name:'Admin',\n                mail:process.env.ADMIN_USER,\n                token_admin: adminToken,\n                isAdmin:true\n            }).end()\n\n        }catch(e){\n            handleError(res, 400, e)\n        }\n\n    },\n\n    async listUsers(req, res){       \n        const all = await u.all()\n        return res.json(all).end()\n    },\n\n    async deleteUser(req, res){\n        const { id } = req.body\n\n        const user = await u.get({id},true)\n\n        if(!user || user === undefined || user == '' || user.id !== id) handleError(res, 404, 'Usuário não encontrado')\n\n        const deleted = await u.delete({id})\n\n        if(!deleted) return handleError(res, 400, 'Não foi possível deletar o usuário')\n\n        return res.json({message:`Usuário ${user.name} deletado com sucesso`})\n        \n    },\n    async listServices(req, res){\n        \n    },\n\n    async deleteService(req, res){\n        \n    }\n\n}"]}