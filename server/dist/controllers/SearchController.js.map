{"version":3,"sources":["../../src/controllers/SearchController.js"],"names":["Util","handleError","u","Model","SearchServices","request","response","query","page","uf","city","cat_id","id","searchData","category_id","where","select","limit","offset","services","json","SearchUsers","name","email","dataSearch","get","users","map","user","password","length","message","console","log"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;;;WACsB,IAAIA,cAAJ,E;IAAfC,W,QAAAA,W;;AACP,IAAMC,IAAI,IAAIC,eAAJ,CAAU,OAAV,CAAV;;kBAEe;AACPC,gBADO;AAAA,yFACQC,OADR,EACiBC,QADjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oCAGUD,QAAQE,KAHlB,CAGHC,IAHG,EAGHA,IAHG,uCAGI,CAHJ;AAAA,+BAKsBH,QAAQE,KAL9B,EAKHE,EALG,kBAKHA,EALG,EAKCC,IALD,kBAKCA,IALD,EAKOC,MALP,kBAKOA,MALP,EAKeC,EALf,kBAKeA,EALf;AAOLC,wBAPK,GAOQ,EAPR;;;AASX,kBAAGJ,EAAH,EAAOI,WAAWJ,EAAX,GAAgBA,EAAhB;AACP,kBAAGC,IAAH,EAASG,WAAWH,IAAX,GAAkBA,IAAlB;AACT,kBAAGC,MAAH,EAAWE,WAAWC,WAAX,GAAyBH,MAAzB;AACX,kBAAGC,EAAH,EAAOC,WAAWD,EAAX,GAAgBA,EAAhB;;AAZI;AAAA,qBAeY,4BAAW,UAAX,EACpBG,KADoB,CACdF,UADc,EAEpBG,MAFoB,CAEb,GAFa,EAGpBC,KAHoB,CAGd,EAHc,EAIpBC,MAJoB,CAIZ,CAACV,OAAM,CAAP,IAAY,EAJA,CAfZ;;AAAA;AAeLW,sBAfK;AAAA,+CAqBJb,SAASc,IAAT,CAAc,EAACD,kBAAD,EAAd,CArBI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAuBPE,aAvBO;AAAA,0FAuBKhB,OAvBL,EAuBcC,QAvBd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gCAwByDD,QAAQE,KAxBjE,uCAwBHK,EAxBG,EAwBHA,EAxBG,sCAwBA,KAxBA,8DAwBOU,IAxBP,EAwBOA,IAxBP,wCAwBY,KAxBZ,iEAwBmBC,KAxBnB,EAwBmBA,KAxBnB,yCAwByB,KAxBzB,iEAwBgCb,IAxBhC,EAwBgCA,IAxBhC,wCAwBqC,KAxBrC,8DAwB4CD,EAxB5C,EAwB4CA,EAxB5C,sCAwB+C,KAxB/C;AAyBLe,wBAzBK,GAyBQ,EAzBR;AAAA;;AA4BT,kBAAGZ,EAAH,EAAOY,WAAWZ,EAAX,GAAgBA,EAAhB;AACP,kBAAGU,IAAH,EAASE,WAAWF,IAAX,GAAkBA,IAAlB;AACT,kBAAGC,KAAH,EAAUC,WAAWD,KAAX,GAAmBA,KAAnB;AACV,kBAAGb,IAAH,EAASc,WAAWd,IAAX,GAAkBA,IAAlB;AACT,kBAAGD,EAAH,EAAOe,WAAWf,EAAX,GAAgBA,EAAhB;;AAhCE;AAAA,qBAkCWP,EAAEuB,GAAF,CAAMD,UAAN,CAlCX;;AAAA;AAkCHE,mBAlCG;;AAmCTA,oBAAMC,GAAN,CAAU;AAAA,uBAAQ,OAAOC,KAAKC,QAApB;AAAA,eAAV;;AAnCS,oBAoCN,CAACH,KAAD,IAAUA,MAAMI,MAAN,IAAgB,CApCpB;AAAA;AAAA;AAAA;;AAAA,gDAoC8BxB,SAASc,IAAT,CAAc,EAACW,wCAAD,EAAd,CApC9B;;AAAA;AAAA,gDAsCFzB,SAASc,IAAT,CAAc,EAACM,YAAD,EAAd,CAtCE;;AAAA;AAAA;AAAA;;AAyCTM,sBAAQC,GAAR;AAzCS,gDA0CFhC,YAAYK,QAAZ,EAAsB,GAAtB,EAA2B,gBAA3B,CA1CE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,C","file":"SearchController.js","sourcesContent":["import {connection} from \"../database/connection\";\nimport Util from '../helpers/Util';\nimport Model from \"../models/Model\";\nconst {handleError} = new Util;\nconst u = new Model('users')\n\nexport default {\n  async SearchServices(request, response) {\n\n    const { page = 1 } = request.query;\n\n    const { uf, city, cat_id, id } = request.query;\n\n    const searchData = {}\n\n    if(uf) searchData.uf = uf\n    if(city) searchData.city = city\n    if(cat_id) searchData.category_id = cat_id\n    if(id) searchData.id = id\n    \n\n    const services = await connection(\"services\")\n      .where(searchData)\n      .select(\"*\")\n      .limit(12)\n      .offset( (page -1) * 12 );\n\n    return response.json({services});\n  },\n  async SearchUsers(request, response) {    \n    const { id=false, name=false, email=false, city=false, uf=false } = request.query\n    const dataSearch = {}\n\n    try{\n      if(id) dataSearch.id = id\n      if(name) dataSearch.name = name\n      if(email) dataSearch.email = email\n      if(city) dataSearch.city = city\n      if(uf) dataSearch.uf = uf\n\n      const users = await u.get(dataSearch)\n      users.map(user => delete user.password )\n      if(!users || users.length <= 0) return response.json({message:`Usuário não encontrado!`})\n\n      return response.json({users});\n\n    }catch(e){\n      console.log(e)\n      return handleError(response, 400, 'Database Error')\n    }\n    \n  },\n\n  \n};\n"]}