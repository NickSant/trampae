{"version":3,"sources":["../../src/controllers/UserController.js"],"names":["jwt","require","Util","handleError","clearString","isAdmin","mailer","Mailer","u","Model","userDefault","index","req","res","query","page","select","limit","offset","user","res_user","map","item","password","json","create","console","log","value","body","name","email","whatsapp","image_url","city","uf","argon2","hash","hashed_pass","data","crypto","randomBytes","toString","id","generateToken","user_id","token","insert","sqlMessage","includes","OAuth","status","login","headers","authorization","split","hashTyp","Buffer","from","AdminController","get","result","undefined","pass_bd","verified"],"mappings":"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","file":"UserController.js","sourcesContent":["import {connection} from '../database/connection'\nimport * as jwt from '../setup/jwt'\nimport Util from '../helpers/Util'\nimport Mailer from '../helpers/mailer'\nimport argon2, { hash, verify } from 'argon2' //algoritmo de hash\nimport crypto from 'crypto'\nimport Model from '../models/Model'\n\nrequire('dotenv/config')\nimport AdminController from './AdminController'\n\nconst { handleError, clearString, isAdmin } = new Util()\n\nconst mailer = new Mailer()\n\nconst u = new Model('users')\n\nconst userDefault = ['id', 'name', 'email', 'whatsapp', 'city', 'uf', 'password']\n\nexport default {\n\t//list users\n\tasync index(req, res) {\n\t\tconst { page = 1 } = req.query\n\n\t\t// const { id:user_id } = req.auth; //DEVELOPMENT\n\t\t// if(!user_id || user_id === undefined || user_id === '') handleError(res, 401, 'Unathorized')\n\n\t\tconst user = await connection('users')\n\t\t\t.select('*')\n\t\t\t.limit(12)\n\t\t\t.offset((page - 1) * 12)\n\n\t\tconst res_user = user.map(item => {\n\t\t\t//deletando senha do objeto de retornos\n\t\t\tdelete item.password\n\t\t\treturn item\n\t\t})\n\n\t\treturn res.json(res_user)\n\t},\n\t//create user\n\tasync create(req, res) {\n\t\tconsole.log('criando user...')\n\t\tconst { name, email, whatsapp, image_url, city, uf, password } = req.value.body\n\t\tconst hashed_pass = await argon2.hash(password)\n\n\t\tconst data = req.value.body\n\t\tdelete data.password\n\n\t\tconst id = await crypto.randomBytes(4).toString('HEX')\n\n\t\tconst token = await jwt.generateToken({ user_id: id }) //gerando token para auth\n\n\t\ttry {\n\t\t\tawait connection('users').insert({\n\t\t\t\tid,\n\t\t\t\tname,\n\t\t\t\temail,\n\t\t\t\twhatsapp,\n\t\t\t\timage_url,\n\t\t\t\tcity,\n\t\t\t\tuf,\n\t\t\t\tpassword: hashed_pass,\n\t\t\t})\n\t\t\tconsole.log(data)\n\t\t} catch (e) {\n\t\t\tif (e.sqlMessage) {\n\t\t\t\tif (e.sqlMessage.includes('users_email_unique')) {\n\t\t\t\t\treturn handleError(res, 406, 'Duplicated email')\n\t\t\t\t} else if (e.sqlMessage.includes('users_whatsapp_unique')) {\n\t\t\t\t\treturn handleError(res, 406, 'Duplicated Whatsapp')\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn handleError(res, 400, `Database Error: ${e}`)\n\t\t}\n\n\t\treturn res.json({ id, token })\n\t},\n\tasync OAuth(req, res) {\n\t\tconst user_id = req.user[0].id\n\t\tconst token = await jwt.generateToken({ user_id })\n\t\treturn res.status(200).json({ token })\n\t},\n\tasync login(req, res) {\n\t\tconsole.log('início login')\n\n\t\tconst [hashTyp, hash] = req.headers.authorization.split(' ') //Basic Authenticate. Formato: Basic HASH\n\t\tconst [email, password] = Buffer.from(hash, 'base64').toString().split(':') //Buffer - descriptografa um hash -> separado por :\n\t\t//Tudo isso vindo dos headers! Pra não deixar exposto (plain-text) no header, os dados que o usuário envia\n\n\t\tconsole.log(email, password)\n\n\t\tif (!email.includes('@') || !email.includes('.') || email.includes(' ') || !password || password === '' || password === null) return handleError(res, 401, 'Malformated Elements')\n\n\t\tif (isAdmin(email, password)) return AdminController.login(req, res)\n\n\t\ttry {\n\t\t\tconsole.log('passou validação')\n\n\t\t\tconst result = await u.get({ email }, true)\n\n\t\t\tconsole.log(result)\n\n\t\t\tif (!result || result === undefined) return handleError(res, 401, 'User not Found')\n\n\t\t\tconst pass_bd = await Buffer.from(result.password, 'base64').toString() //DECODIFICANDO HASH DO PRÓPRIO MYSQL!!! - também é do tipo base64!\n\n\t\t\t\n\t\t\tconst verified = await verify(pass_bd, password);\n\n\t\t\tconsole.log('decodificou buffer', verified)\n\n\t\t\tif (!(verified)) return handleError(res, 401, 'Senha Incorreta')\n\n\t\t\tconst token = await jwt.generateToken({ user_id: result.id })\n\n\t\t\tconsole.log('Logou!', `Usuário: ${result.name}`)\n\n\t\t\tconst user = {\n\t\t\t\tname: result.name,\n\t\t\t\temail: result.email,\n\t\t\t\tid: result.id,\n\t\t\t\timage_url: result.image_url,\n\t\t\t\tisAdmin: false,\n\t\t\t}\n\t\t\tres.json({ user: user, token: token })\n\t\t} catch (err) {\n\t\t\treturn handleError(res, 400, err)\n\t\t}\n\t},\n}\n"]}