{"version":3,"sources":["../../src/controllers/ServiceController.js"],"names":["jwt","Util","handleError","sv","Model","index","request","response","query","page","count","console","log","select","limit","offset","services","json","delete","id","params","user_id","auth","get","service","length","where","status","message","create","body","title","description","price","id_category","city","uf","data","crypto","randomBytes","toString","insert","category_id","service_id","edit","req","res","field","newValue","update","end"],"mappings":"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","file":"ServiceController.js","sourcesContent":["import connection from '../database/connection'\nimport crypto from 'crypto'\n\nimport * as jwt from '../setup/jwt'\n\nimport Util from '../helpers/Util'\nimport Model from '../models/Model'\n\nconst { handleError } = new Util()\n\nconst sv = new Model('services')\n\n\n\nexport default {\n\tasync index(request, response) {\n\t\t//valor default de paginação -> page = 1\n\t\tconst { page = 1 } = request.query\n\n\t\ttry {\n\t\t\tconst [count] = await connection('services').count() //retorna um array com a quantidade de services\n\n\t\t\tconsole.log(`Total de services cadastrados: ${count['count(*)']}`)\n\n\t\t\tconst services = await connection('services')\n\t\t\t\t.select('*')\n\t\t\t\t.limit(12)\n\t\t\t\t.offset((page - 1) * 12) //pula as páginas retornadas, em função da query\n\n\t\t\treturn response.json(services)\n\t\t} catch (e) {\n\t\t\treturn handleError(response, 400, `Database Error: ${e}`)\n\t\t}\n\t},\n\tasync delete(request, response) {\n\t\tconst { id } = request.params\n\n\t\tconst { id: user_id } = request.auth //param criado no middleware!\n\t\t\n\t\t\n\t\tconst service = await sv.get({id}, true)\n\n\t\tif(service.length <= 0) handleError(response, 400, 'Serviço não encontrado')\n\t\t\n\n\t\tif (service.user_id !== user_id) return handleError(response, 401, 'unauthorized_to_delete_service')\n\n\t\ttry {\n\t\t\tawait connection('services')\n\t\t\t\t.where({\n\t\t\t\t\tid: id,\n\t\t\t\t\tuser_id: user_id,\n\t\t\t\t})\n\t\t\t\t.delete()\n\t\t\treturn response.status(204).json({message: `Serviço deletado com sucesso!`})\n\t\t} catch (e) {\n\t\t\treturn handleError(response, 400, `Delete Service Error: ${e}`)\n\t\t}\n\t},\n\tasync create(request, response) {\n\t\tconst { title, description, price, id_category, city, uf } = request.body\n\n\t\tconst data = request.body\n\t\tconsole.log(data)\n\t\tconst { id: user_id } = request.auth\n\t\tconst id = crypto.randomBytes(4).toString('HEX')\n\t\ttry {\n\t\t\tawait sv.insert({\n\t\t\t\tid,\n\t\t\t\ttitle,\n\t\t\t\tdescription,\n\t\t\t\tprice,\n\t\t\t\tcity,\n\t\t\t\tuf,\n\t\t\t\tuser_id,\n\t\t\t\tcategory_id: id_category\n\t\t\t})\n\t\t} catch (e) {\n\t\t\treturn handleError(response, 400, `Create Service Error: ${e}`)\n\t\t}\n\t\treturn response.json({ service_id: id })\n\t},\n\n\tasync edit(req, res){\n\t\tconst { id } = req.params\n\n\t\tconst { id:user_id } = req.auth\n\t\tconst { field, newValue } = req.body\n\n\t\ttry {\n\t\t\t\n\t\t\tif(!field || !newValue) return handleError(res, 400, 'Campo ou novo valor não passado!')\n\t\n\t\t\tconst service = await sv.get({id, user_id}, true)\n\n\t\t\tif(!service || service.length <= 0 || !service.id ) return handleError(res, 400, `Não foi possível editar o serviço.`)\n\n\t\t\tsv.update({ id: service.id }, { [field]: newValue })\n\n\t\t\treturn res.json({message: 'Serviço atualizado com sucesso!'}).end()\n\t\t\t\n\t\t} catch (error) {\n\t\t\treturn handleError(res, 400, error)\n\t\t}\n\t}\n}\n"]}