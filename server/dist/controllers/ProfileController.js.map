{"version":3,"sources":["../../src/controllers/ProfileController.js"],"names":["jwt","userDefault","Util","handleError","clearString","mysqlNowFormat","dateTimeToISO","util","mailer","Mailer","u","Model","cp","profile","req","res","id","params","req_id","auth","get","exists","undefined","password","console","log","changePermission","json","uploadImage","file","mimetype","split","tipoImg","original_name","name","name_user","fs","rename","originalname","err","filename","path","update","image_url","image","updateData","user_id","newValue","body","type","typeExists","filter","field","result","newUser","status","end","forgotPass","mail","email","then","user","urlHash","crypto","randomBytes","link","process","env","BASE_URL","subject","now","insert","hash_url","created_at","setMailConfigs","send","message","catch","e","changePass","newPass","url_hash","headers","userID","reqTime","timestampDiff","timeDiff","hashed_pass","updatedUser","currentUser","registerUserWork"],"mappings":"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","file":"ProfileController.js","sourcesContent":["import connection from '../database/connection'\nimport * as jwt from '../setup/jwt'\nimport Util from '../helpers/Util'\nimport Mailer from '../helpers/mailer'\nimport argon2, { hash } from 'argon2' //algoritmo de hash\nimport fs from 'fs'\nimport crypto from 'crypto'\nimport sha1 from 'sha1'\n\nimport 'dotenv/config'\nimport Model from '../models/Model'\n\n\nconst userDefault = ['id', 'name', 'email', 'whatsapp', 'city', 'uf', 'password', 'total_trampos', 'third_party_id', 'image_url', 'hash_url_to_change_pass', 'req_change_pass_time']\n\nconst { handleError, clearString, mysqlNowFormat, dateTimeToISO } = new Util()\nconst util = new Util()\n\nconst mailer = new Mailer()\nconst u = new Model('users')\n\nconst cp = new Model('change_pass_occurrences')\n\nexport default {\n\tasync profile(req, res) {\n\t\tconst { id } = req.params\n\t\tconst { id: req_id } = req.auth //id do user autenticado e logado\n\n\t\t\n\t\tconst exists = await u.get({id},true)\n\n\t\tif (!exists || exists === undefined || exists === '') return handleError(res, 401, `User ${id} not exists`)\n\n\t\tdelete exists.password\n\n\t\tif (id === req_id) {\n\t\t\t//ĺógica para a possibilidade de editar os dados!!\n\t\t\tconsole.log('USER ENTROU NO PRÓPRIO PERFIL')\n\t\t\texists.changePermission = true\n\t\t} else {\n\t\t\t//dados são somente visíveis ao user 'requisitante'\n\t\t\tconsole.log('USER ENTROU NO PERFIL DE OUTRO')\n\t\t\texists.changePermission = false\n\t\t}\n\n\t\treturn res.json(exists)\n\t},\n\tasync uploadImage(req, res) {\n\t\ttry {\n\t\t\tconst [, tipoImg] = req.file.mimetype.split('/')\n\n\t\t\tconst { name: original_name, id } = req.auth\n\t\t\tif (!id || id === undefined || id === '') return handleError(res, 401, 'Operação não permitida')\n\n\t\t\tif (req.file === undefined || !req.file) return handleError(res, 400, 'Archive Does not exists')\n\n\t\t\tconst name_user = clearString(original_name)\n\t\t\tconsole.log(name_user)\n\n\t\t\tfs.rename(\n\t\t\t\t`./uploads/${req.file.originalname}`, //nome antigo\n\t\t\t\t`./uploads/${name_user}-${id}.${tipoImg}`, //novo nome\n\t\t\t\terr => {\n\t\t\t\t\t//catch\n\t\t\t\t\tif (err) return handleError(res, 400, `Erro: ${err}`)\n\t\t\t\t\tconsole.log('Arquivo renomeado')\n\t\t\t\t}\n\t\t\t)\n\t\t\t//renomeando arquivo para inserir path no banco\n\t\t\t//NOME_USER-ID_USER.TIPO\n\t\t\treq.file.originalname = `${name_user}-${id}.${tipoImg}`\n\t\t\treq.file.filename = `${name_user}-${id}.${tipoImg}`\n\t\t\t//caminho da imagem\n\t\t\treq.file.path = `uploads/${req.file.filename}`\n\n\t\t\t\n\t\t\tawait u.update({id} ,{image_url: req.file.path})\n\t\t\tconsole.log('inseriu path image no banco')\n\n\t\t\treturn res.json({\n\t\t\t\timage: req.file,\n\t\t\t})\n\t\t} catch (e) {\n\t\t\treturn handleError(res, 400, e)\n\t\t}\n\t},\n\tasync updateData(req, res) {\n\t\tconst { id: user_id } = req.auth\n\t\tconst { newValue } = req.body\n\t\tconst { type } = req.params\n\n\t\tlet typeExists = false\n\n\t\tif (newValue === undefined || newValue === null || newValue === '') return handleError(res, 400, `Você precisa declarar um Novo valor para ${type}`)\n\n\t\tuserDefault.filter(field => {\n\t\t\tif (field === type) return (typeExists = true)\n\t\t})\n\t\tconsole.log(typeExists)\n\n\t\tif (typeExists) {\n\t\t\ttry {\n\t\t\t\t\n\t\t\t\tconst result = await u.update({id:user_id}, { [type]: [newValue] })\n\t\t\t\tconsole.log(result, 'result')\n\t\t\t\tif (result !== undefined && result !== '') {\n\t\t\t\t\t\n\t\t\t\t\tconst newUser = await u.get({id}, true)\n\n\t\t\t\t\tdelete newUser.password\n\t\t\t\t\tconsole.log('Succefully Update!')\n\t\t\t\t\tres.status(200)\n\t\t\t\t\treturn res.json(newUser).end()\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\treturn handleError(res, 400, e)\n\t\t\t}\n\t\t} else {\n\t\t\treturn handleError(res, 400, `Type \"${type}\" doesn't exists`)\n\t\t}\n\t},\n\n\tasync forgotPass(req, res) {\n\t\tconst { mail } = req.body\n\t\t\n\t\tu.get({email:mail},true)\n\t\t\t.then(user => {\n\t\t\t\tif(!user) return handleError(res, 400, 'bad_request')\n\t\t\t\tdelete user.password\n\t\t\t\tconsole.log(user)\n\n\t\t\t\tconst urlHash = sha1(crypto.randomBytes(4))\n\t\t\t\tconst link = `${process.env.BASE_URL}recover/${urlHash}`\n\n\t\t\t\tconst subject = 'Recuperação de Senha'\n\t\t\t\tconst body = `\n\t\t\t\t\t<h1> Recuperação de Senha do usuário: ${user.name} </h1>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tOlá <b>${user.name}</b>, recebemos uma solicitação de mudança de Senha.\n\t\t\t\t\t\tBasta clicar no Botão abaixo, e efetivar a mudança de sua senha.\n\t\t\t\t\t</p>\n\t\t\t\t\t<br />\n\t\t\t\t\t<a href=\"${link}\"> Clique Aqui </a>\n\t\t\t\t\t<br />\n\t\t\t\t\t<small>OBS: o link expira em 24h.</small>\n\t\t\t\t`\n\n\t\t\t\tconst now = mysqlNowFormat()\t\t\t\t\n\n\t\t\t\tcp.insert({user_id: user.id, hash_url: urlHash, created_at: now}).then( a => {\n\t\t\t\t\tmailer.setMailConfigs(mail, subject, body)\n\t\t\t\t\tmailer.send().then(send => {\n\t\t\t\t\t\tif (!send) return handleError(res, 400, 'Não foi possível enviar o email\\nTente novamente mais tarde')\n\t\t\t\t\t\treturn res.json({\n\t\t\t\t\t\t\tmessage: 'Email enviado com sucesso',\n\t\t\t\t\t\t\tlink: link,\n\t\t\t\t\t\t}).status(200).end()\n\t\t\t\t\t})\n\t\t\t\t} )\n\t\t\t\t.catch(e =>{\n\t\t\t\t\thandleError(res, 400, e)\n\t\t\t\t})\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tconsole.log(err)\n\t\t\t\treturn handleError(res, 400, 'Não foi possível enviar o email\\nTente novamente mais tarde')\n\t\t\t})\n\t},\n\tasync changePass(req, res) {\n\t\tconst { newPass } = req.body //vem em BASE64!!\n\t\tconst { url_hash } = req.headers\n\t\n\t\t// const pass = Buffer.from(newPass, 'base64').toString()\n\t\t\n\t\tconst userID = await cp.get({hash_url: url_hash}, true)\n\n\t\tif(userID.status) return handleError(res, 401, 'Senha já atualizada!')\n\n\t\tif(!userID.user_id || userID.user_id === undefined) return handleError(res, 401, 'Não autorizado')\n\n\t\tconst user = await u.get({id: userID.user_id}, true)\n\n\t\tif (!user || user === undefined) return handleError(res, 401, 'Não autorizado.')\n\t\tlet reqTime = dateTimeToISO(userID.created_at)\n\n\t\tconst timeDiff = await util.timestampDiff(reqTime)\n\n\t\tif(timeDiff >= 24 ) return handleError(res, 401, 'unauthorized')\n\n\t\tconsole.log(timeDiff)\n\n\t\tconst hashed_pass = await hash(newPass)\n\t\n\t\tconst updatedUser = await u.update({id: user.id}, {password: hashed_pass})\n\n\t\t// await u.update({id:user.id}, {password: hashed_pass})\n\n\t\tif (!updatedUser === 1) return handleError(res, 400, 'Não foi possível atualizar a senha\\nTente novamente mais tarde')\n\n\t\tconst currentUser = await u.get({id:user.id}, true)\t\t\n\n\t\tdelete currentUser.password\n\n\t\tconsole.log(updatedUser)\n\n\t\tawait cp.update({user_id: currentUser.id}, {status: true})\n\n\t\treturn res.json({\n\t\t\tcurrentUser: currentUser,\n\t\t\tmessage: 'Senha atualizada com sucesso!',\n\t\t})\n\t},\n\tasync registerUserWork() {\n\t\t\n\t},\n}\n"]}