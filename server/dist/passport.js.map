{"version":3,"sources":["../src/passport.js"],"names":["GooglePlusTokenStrategy","require","FacebookStrategy","passport","use","clientID","process","env","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","accessToken","refreshToken","profile","done","select","where","id","existingUser","length","crypto","randomBytes","toString","insert","third_party_id","name","displayName","email","emails","value","image_url","photos","user","FB_CLIENT_ID","FB_CLIENT_SECRET","console","log"],"mappings":"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","file":"passport.js","sourcesContent":["import passport from \"passport\";\nimport crypto from \"crypto\";\n\nconst GooglePlusTokenStrategy = require(\"passport-google-plus-token\");\nconst FacebookStrategy = require(\"passport-facebook-token\");\n\nrequire(\"dotenv/config\");\n\nimport connection from \"./database/connection\";\n\npassport.use(\n  \"googleToken\",\n  new GooglePlusTokenStrategy(\n    {\n      clientID: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    },\n    async (accessToken, refreshToken, profile, done) => {\n      try {\n        const existingUser = await connection(\"users\")\n          .select(\"*\")\n          .where(\"third_party_id\", profile.id);\n\n        if (existingUser.length === 1) {\n          done(null, existingUser);\n          return;\n        }\n\n        const id = crypto.randomBytes(4).toString(\"HEX\");\n\n        await connection(\"users\").insert({\n          id,\n          third_party_id: profile.id,\n          name: profile.displayName,\n          email: profile.emails[0].value,\n          image_url: profile.photos[0].value,\n        });\n\n        const user = await connection(\"users\").select(\"*\").where(\"id\", id);\n\n        done(null, user);\n      } catch (error) {\n        done(error, false);\n      }\n    }\n  )\n);\n\npassport.use(\n  \"facebookToken\",\n  new FacebookStrategy(\n    {\n      clientID: process.env.FB_CLIENT_ID,\n      clientSecret: process.env.FB_CLIENT_SECRET\n    },\n    async (accessToken, refreshToken, profile, done) => {\n      try {\n        console.log(accessToken);\n        console.log(profile);\n        const existingUser = await connection(\"users\")\n          .select(\"*\")\n          .where(\"third_party_id\", profile.id);\n\n        if (existingUser.length === 1) {\n          done(null, existingUser);\n          return;\n        }\n\n        const id = crypto.randomBytes(4).toString(\"HEX\");\n\n        await connection(\"users\").insert({\n          id,\n          third_party_id: profile.id,\n          name: profile.displayName,\n          email: profile.emails[0].value,\n          image_url: profile.photos[0].value,\n        });\n\n        const user = await connection(\"users\").select(\"*\").where(\"id\", id);\n\n        done(null, user);\n      } catch (error) {\n        done(error, false);\n      }\n    }\n  )\n);\n"]}