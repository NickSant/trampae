{"version":3,"sources":["../src/routes.js"],"names":["routes","post","schemas","signUpSchema","UserController","create","login","ProfileController","forgotPass","mailerAuth","put","changePass","get","index","ServiceController","authMiddleware","req","res","send","auth","updateData","multer","single","uploadImage","profile","SearchController","SearchServices","SearchUsers","serviceSchema","delete","edit","adminMiddleware","json","isAdmin","headers","AdminController","listUsers","deleteUser","listServices","deleteService","url","status"],"mappings":";;;;;;AAAA;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,SAAS,sBAAf;;AAEA;AACAA,OAAOC,IAAP,CAAY,SAAZ,EAAuB,8BAAaC,oBAAQC,YAArB,CAAvB,EAA2DC,yBAAeC,MAA1E;;AAEA;AACAL,OAAOC,IAAP,CAAY,QAAZ,EAAsBG,yBAAeE,KAArC;;AAEAN,OAAOC,IAAP,CAAY,SAAZ,EAAuBM,4BAAkBC,UAAzC;AACAR,OAAOC,IAAP,CAAY,kBAAZ,EAAgCQ,qBAAhC;AACAT,OAAOU,GAAP,CAAW,SAAX,EAAsBD,qBAAtB,EAAkCF,4BAAkBI,UAApD;;AAEA;AACA;;AAEA;;AAEA;AACAX,OAAOY,GAAP,CAAW,OAAX,EAAoBR,yBAAeS,KAAnC;AACA;AACAb,OAAOY,GAAP,CAAW,WAAX,EAAwBE,4BAAkBD,KAA1C;;AAEA;;AAEA;AACA;AACA;;AAEA;AACAb,OAAOY,GAAP,CAAW,KAAX,EAAkBG,cAAlB,EAAkC,UAACC,GAAD,EAAMC,GAAN;AAAA,QAAcA,IAAIC,IAAJ,CAASF,IAAIG,IAAb,CAAd;AAAA,CAAlC;AACA;AACA;AACA;;;AAGAnB,OAAOU,GAAP,CAAW,eAAX,EAA4BK,cAA5B,EAA4CR,4BAAkBa,UAA9D;;AAEA;AACA;AACA;AACA;AACA;AACApB,OAAOC,IAAP,CAAY,eAAZ,EAA6Bc,cAA7B,EAA6CM,iBAAOC,MAAP,CAAc,YAAd,CAA7C,EAA0Ef,4BAAkBgB,WAA5F;;AAEAvB,OAAOY,GAAP,CAAW,WAAX,EAAwBG,cAAxB,EAAwCR,4BAAkBiB,OAA1D;;AAEA;AACAxB,OAAOY,GAAP,CAAW,kBAAX,EAA+BG,cAA/B,EAA+CU,2BAAiBC,cAAhE;AACA1B,OAAOY,GAAP,CAAW,eAAX,EAA4BG,cAA5B,EAA4CU,2BAAiBE,WAA7D;;AAEA3B,OAAOC,IAAP,CAAY,WAAZ,EAAyBc,cAAzB,EAAyC,8BAAab,oBAAQ0B,aAArB,CAAzC,EAA8Ed,4BAAkBT,MAAhG;AACAL,OAAO6B,MAAP,CAAc,eAAd,EAA+Bd,cAA/B,EAA+CD,4BAAkBe,MAAjE;;AAEA7B,OAAOU,GAAP,CAAW,eAAX,EAA4BK,cAA5B,EAA4CD,4BAAkBgB,IAA9D;;AAEA;AACA9B,OAAOY,GAAP,CAAW,UAAX,EAAuBmB,eAAvB,EAAwC,UAACf,GAAD,EAAMC,GAAN;AAAA,QAAcA,IAAIe,IAAJ,CAAS,EAACC,SAASjB,IAAIkB,OAAJ,CAAYD,OAAZ,GAAsB,IAAtB,GAA6B,KAAvC,EAAT,CAAd;AAAA,CAAxC;;AAEAjC,OAAOY,GAAP,CAAW,cAAX,EAA2BmB,eAA3B,EAA4CI,0BAAgBC,SAA5D;AACApC,OAAO6B,MAAP,CAAc,cAAd,EAA8BE,eAA9B,EAA+CI,0BAAgBE,UAA/D;;AAEArC,OAAOY,GAAP,CAAW,gBAAX,EAA6BmB,eAA7B,EAA8CI,0BAAgBG,YAA9D;AACAtC,OAAO6B,MAAP,CAAc,gBAAd,EAAgCE,eAAhC,EAAiDI,0BAAgBI,aAAjE;;AAEA;AACAvC,OAAOY,GAAP,CAAW,GAAX,EAAgB,UAACI,GAAD,EAAMC,GAAN,EAAc;AAC7BA,KAAIe,IAAJ,6BAAmChB,IAAIwB,GAAvC,EAA8CC,MAA9C,CAAqD,GAArD;AACA,CAFD;AAGAzC,OAAOC,IAAP,CAAY,GAAZ,EAAiB,UAACe,GAAD,EAAMC,GAAN,EAAc;AAC9BA,KAAIe,IAAJ,6BAAmChB,IAAIwB,GAAvC,EAA8CC,MAA9C,CAAqD,GAArD;AACA,CAFD;AAGAzC,OAAOU,GAAP,CAAW,GAAX,EAAgB,UAACM,GAAD,EAAMC,GAAN,EAAc;AAC7BA,KAAIe,IAAJ,6BAAmChB,IAAIwB,GAAvC,EAA8CC,MAA9C,CAAqD,GAArD;AACA,CAFD;AAGAzC,OAAO6B,MAAP,CAAc,GAAd,EAAmB,UAACb,GAAD,EAAMC,GAAN,EAAc;AAChCA,KAAIe,IAAJ,6BAAmChB,IAAIwB,GAAvC,EAA8CC,MAA9C,CAAqD,GAArD;AACA,CAFD;;kBAIezC,M","file":"routes.js","sourcesContent":["import { Router } from 'express'\nimport passport from \"passport\";\n\nimport UserController from './controllers/UserController'\nimport ServiceController from './controllers/ServiceController'\nimport SearchController from './controllers/SearchController'\nimport ProfileController from './controllers/ProfileController'\nimport AdminController from './controllers/AdminController'\n\nimport { validateBody, schemas } from './helpers/validation'\nimport multer from './helpers/multer'\n\nimport authMiddleware from './setup/middlewares/auth'\nimport mailerAuth from './setup/middlewares/mailer_auth'\nimport adminMiddleware from './setup/middlewares/admin'\nimport passportConf from \"./passport\";\n\nconst routes = Router()\n\n//SignUp rota\nroutes.post('/signup', validateBody(schemas.signUpSchema), UserController.create)\n\n//SignIn rota\nroutes.post('/login', UserController.login)\n\nroutes.post('/forgot', ProfileController.forgotPass)\nroutes.post('/verfiy-url-hash', mailerAuth)\nroutes.put('/forgot', mailerAuth, ProfileController.changePass)\n\n// // GoogleOAuth\n// routes.post('/oauth/google', passport.authenticate('googleToken', { session: false }), UserController.OAuth)\n\n// routes.post('/oauth/facebook', passport.authenticate('facebookToken', { session: false }), UserController.OAuth)\n\n//listar usuários - development - \nroutes.get('/user', UserController.index)\n//Listar serviços - development \nroutes.get('/services', ServiceController.index)\n\n//ROTAS EM QUE É NECESSÁRIO AUTH-----------------------------------------------------------------------------\n\n// routes.use(authMiddleware); //authenticator\n//pra todas as próximas rotas, o servidor vai passar por esse middleware pra verificar se o token do usuário, passado pelo Bearer da requisição é válido\n// logo, em todas preciso passar no header da req, um authorization do tipo Bearer!!!!\n\n//para INVALIDAR o token: no lado do client!\nroutes.get('/me', authMiddleware, (req, res) => res.send(req.auth))\n//rota para usar no client, que busca qual usuário foi autenticado. (ver arquivo auth.js)\n//de acordo com o bearer token\n//esse parâmetro é setado em auth.js\n\n\nroutes.put('/update/:type', authMiddleware, ProfileController.updateData)\n\n//UPLOAD DE IMAGENS - Perfil\n//setando middleware multer.js\n//as imagens devem ser por um form no insomnia!!\n//as configurações da imagens podem ser acessadas no controller com esse nome \"img_perfil\"\n//o name do campo que enviar a imagem, deve ser exatamente igual ao do .single()\nroutes.post('/upload-image', authMiddleware, multer.single('img_perfil'), ProfileController.uploadImage)\n\nroutes.get('/user/:id', authMiddleware, ProfileController.profile)\n\n//searches\nroutes.get('/search/services', authMiddleware, SearchController.SearchServices)\nroutes.get('/search/users', authMiddleware, SearchController.SearchUsers)\n\nroutes.post('/services', authMiddleware, validateBody(schemas.serviceSchema), ServiceController.create)\nroutes.delete('/services/:id', authMiddleware, ServiceController.delete)\n\nroutes.put('/services/:id', authMiddleware, ServiceController.edit)\n\n//rotas admin\nroutes.get('/isadmin', adminMiddleware ,(req, res) => res.json({isAdmin: req.headers.isAdmin ? true : false}) )\n\nroutes.get('/admin/users', adminMiddleware, AdminController.listUsers)\nroutes.delete('/admin/users', adminMiddleware, AdminController.deleteUser)\n\nroutes.get('admin/services', adminMiddleware, AdminController.listServices)\nroutes.delete('admin/services', adminMiddleware, AdminController.deleteService)\n\n//404 routes\nroutes.get('*', (req, res) => {\n\tres.json(`Cannot found endpoint: ${req.url}`).status(404)\n})\nroutes.post('*', (req, res) => {\n\tres.json(`Cannot found endpoint: ${req.url}`).status(404)\n})\nroutes.put('*', (req, res) => {\n\tres.json(`Cannot found endpoint: ${req.url}`).status(404)\n})\nroutes.delete('*', (req, res) => {\n\tres.json(`Cannot found endpoint: ${req.url}`).status(404)\n})\n\nexport default routes"]}